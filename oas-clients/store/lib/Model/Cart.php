<?php
/**
 * Cart
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MedusaWP\MedusaClient\Store
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Medusa Storefront API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MedusaWP\MedusaClient\Store\Model;

use \ArrayAccess;
use \MedusaWP\MedusaClient\Store\ObjectSerializer;

/**
 * Cart Class Doc Comment
 *
 * @category Class
 * @description A cart represents a virtual shopping bag. It can be used to complete an order, a swap, or a claim.
 * @package  MedusaWP\MedusaClient\Store
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Cart implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Cart';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'email' => 'string',
        'billing_address_id' => 'string',
        'billing_address' => '\MedusaWP\MedusaClient\Store\Model\Address',
        'shipping_address_id' => 'string',
        'shipping_address' => '\MedusaWP\MedusaClient\Store\Model\Address',
        'items' => '\MedusaWP\MedusaClient\Store\Model\LineItem[]',
        'region_id' => 'string',
        'region' => '\MedusaWP\MedusaClient\Store\Model\Region',
        'discounts' => '\MedusaWP\MedusaClient\Store\Model\Discount[]',
        'gift_cards' => '\MedusaWP\MedusaClient\Store\Model\GiftCard[]',
        'customer_id' => 'string',
        'customer' => '\MedusaWP\MedusaClient\Store\Model\Customer',
        'payment_session' => '\MedusaWP\MedusaClient\Store\Model\PaymentSession',
        'payment_sessions' => '\MedusaWP\MedusaClient\Store\Model\PaymentSession[]',
        'payment_id' => 'string',
        'payment' => '\MedusaWP\MedusaClient\Store\Model\Payment',
        'shipping_methods' => '\MedusaWP\MedusaClient\Store\Model\ShippingMethod[]',
        'type' => 'string',
        'completed_at' => '\DateTime',
        'payment_authorized_at' => '\DateTime',
        'idempotency_key' => 'string',
        'context' => 'object',
        'sales_channel_id' => 'string',
        'sales_channel' => '\MedusaWP\MedusaClient\Store\Model\SalesChannel',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'deleted_at' => '\DateTime',
        'metadata' => 'object',
        'shipping_total' => 'int',
        'discount_total' => 'int',
        'raw_discount_total' => 'int',
        'item_tax_total' => 'int',
        'shipping_tax_total' => 'int',
        'tax_total' => 'int',
        'refunded_total' => 'int',
        'total' => 'int',
        'subtotal' => 'int',
        'refundable_amount' => 'int',
        'gift_card_total' => 'int',
        'gift_card_tax_total' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'email' => 'email',
        'billing_address_id' => null,
        'billing_address' => null,
        'shipping_address_id' => null,
        'shipping_address' => null,
        'items' => null,
        'region_id' => null,
        'region' => null,
        'discounts' => null,
        'gift_cards' => null,
        'customer_id' => null,
        'customer' => null,
        'payment_session' => null,
        'payment_sessions' => null,
        'payment_id' => null,
        'payment' => null,
        'shipping_methods' => null,
        'type' => null,
        'completed_at' => 'date-time',
        'payment_authorized_at' => 'date-time',
        'idempotency_key' => null,
        'context' => null,
        'sales_channel_id' => null,
        'sales_channel' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'deleted_at' => 'date-time',
        'metadata' => null,
        'shipping_total' => null,
        'discount_total' => null,
        'raw_discount_total' => null,
        'item_tax_total' => null,
        'shipping_tax_total' => null,
        'tax_total' => null,
        'refunded_total' => null,
        'total' => null,
        'subtotal' => null,
        'refundable_amount' => null,
        'gift_card_total' => null,
        'gift_card_tax_total' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'email' => true,
		'billing_address_id' => true,
		'billing_address' => false,
		'shipping_address_id' => true,
		'shipping_address' => false,
		'items' => false,
		'region_id' => false,
		'region' => false,
		'discounts' => false,
		'gift_cards' => false,
		'customer_id' => true,
		'customer' => false,
		'payment_session' => false,
		'payment_sessions' => false,
		'payment_id' => true,
		'payment' => false,
		'shipping_methods' => false,
		'type' => false,
		'completed_at' => true,
		'payment_authorized_at' => true,
		'idempotency_key' => true,
		'context' => true,
		'sales_channel_id' => true,
		'sales_channel' => false,
		'created_at' => false,
		'updated_at' => false,
		'deleted_at' => true,
		'metadata' => true,
		'shipping_total' => false,
		'discount_total' => false,
		'raw_discount_total' => false,
		'item_tax_total' => false,
		'shipping_tax_total' => false,
		'tax_total' => false,
		'refunded_total' => false,
		'total' => false,
		'subtotal' => false,
		'refundable_amount' => false,
		'gift_card_total' => false,
		'gift_card_tax_total' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'email' => 'email',
        'billing_address_id' => 'billing_address_id',
        'billing_address' => 'billing_address',
        'shipping_address_id' => 'shipping_address_id',
        'shipping_address' => 'shipping_address',
        'items' => 'items',
        'region_id' => 'region_id',
        'region' => 'region',
        'discounts' => 'discounts',
        'gift_cards' => 'gift_cards',
        'customer_id' => 'customer_id',
        'customer' => 'customer',
        'payment_session' => 'payment_session',
        'payment_sessions' => 'payment_sessions',
        'payment_id' => 'payment_id',
        'payment' => 'payment',
        'shipping_methods' => 'shipping_methods',
        'type' => 'type',
        'completed_at' => 'completed_at',
        'payment_authorized_at' => 'payment_authorized_at',
        'idempotency_key' => 'idempotency_key',
        'context' => 'context',
        'sales_channel_id' => 'sales_channel_id',
        'sales_channel' => 'sales_channel',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'deleted_at' => 'deleted_at',
        'metadata' => 'metadata',
        'shipping_total' => 'shipping_total',
        'discount_total' => 'discount_total',
        'raw_discount_total' => 'raw_discount_total',
        'item_tax_total' => 'item_tax_total',
        'shipping_tax_total' => 'shipping_tax_total',
        'tax_total' => 'tax_total',
        'refunded_total' => 'refunded_total',
        'total' => 'total',
        'subtotal' => 'subtotal',
        'refundable_amount' => 'refundable_amount',
        'gift_card_total' => 'gift_card_total',
        'gift_card_tax_total' => 'gift_card_tax_total'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'email' => 'setEmail',
        'billing_address_id' => 'setBillingAddressId',
        'billing_address' => 'setBillingAddress',
        'shipping_address_id' => 'setShippingAddressId',
        'shipping_address' => 'setShippingAddress',
        'items' => 'setItems',
        'region_id' => 'setRegionId',
        'region' => 'setRegion',
        'discounts' => 'setDiscounts',
        'gift_cards' => 'setGiftCards',
        'customer_id' => 'setCustomerId',
        'customer' => 'setCustomer',
        'payment_session' => 'setPaymentSession',
        'payment_sessions' => 'setPaymentSessions',
        'payment_id' => 'setPaymentId',
        'payment' => 'setPayment',
        'shipping_methods' => 'setShippingMethods',
        'type' => 'setType',
        'completed_at' => 'setCompletedAt',
        'payment_authorized_at' => 'setPaymentAuthorizedAt',
        'idempotency_key' => 'setIdempotencyKey',
        'context' => 'setContext',
        'sales_channel_id' => 'setSalesChannelId',
        'sales_channel' => 'setSalesChannel',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'deleted_at' => 'setDeletedAt',
        'metadata' => 'setMetadata',
        'shipping_total' => 'setShippingTotal',
        'discount_total' => 'setDiscountTotal',
        'raw_discount_total' => 'setRawDiscountTotal',
        'item_tax_total' => 'setItemTaxTotal',
        'shipping_tax_total' => 'setShippingTaxTotal',
        'tax_total' => 'setTaxTotal',
        'refunded_total' => 'setRefundedTotal',
        'total' => 'setTotal',
        'subtotal' => 'setSubtotal',
        'refundable_amount' => 'setRefundableAmount',
        'gift_card_total' => 'setGiftCardTotal',
        'gift_card_tax_total' => 'setGiftCardTaxTotal'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'email' => 'getEmail',
        'billing_address_id' => 'getBillingAddressId',
        'billing_address' => 'getBillingAddress',
        'shipping_address_id' => 'getShippingAddressId',
        'shipping_address' => 'getShippingAddress',
        'items' => 'getItems',
        'region_id' => 'getRegionId',
        'region' => 'getRegion',
        'discounts' => 'getDiscounts',
        'gift_cards' => 'getGiftCards',
        'customer_id' => 'getCustomerId',
        'customer' => 'getCustomer',
        'payment_session' => 'getPaymentSession',
        'payment_sessions' => 'getPaymentSessions',
        'payment_id' => 'getPaymentId',
        'payment' => 'getPayment',
        'shipping_methods' => 'getShippingMethods',
        'type' => 'getType',
        'completed_at' => 'getCompletedAt',
        'payment_authorized_at' => 'getPaymentAuthorizedAt',
        'idempotency_key' => 'getIdempotencyKey',
        'context' => 'getContext',
        'sales_channel_id' => 'getSalesChannelId',
        'sales_channel' => 'getSalesChannel',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'deleted_at' => 'getDeletedAt',
        'metadata' => 'getMetadata',
        'shipping_total' => 'getShippingTotal',
        'discount_total' => 'getDiscountTotal',
        'raw_discount_total' => 'getRawDiscountTotal',
        'item_tax_total' => 'getItemTaxTotal',
        'shipping_tax_total' => 'getShippingTaxTotal',
        'tax_total' => 'getTaxTotal',
        'refunded_total' => 'getRefundedTotal',
        'total' => 'getTotal',
        'subtotal' => 'getSubtotal',
        'refundable_amount' => 'getRefundableAmount',
        'gift_card_total' => 'getGiftCardTotal',
        'gift_card_tax_total' => 'getGiftCardTaxTotal'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE__DEFAULT = 'default';
    public const TYPE_SWAP = 'swap';
    public const TYPE_DRAFT_ORDER = 'draft_order';
    public const TYPE_PAYMENT_LINK = 'payment_link';
    public const TYPE_CLAIM = 'claim';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE__DEFAULT,
            self::TYPE_SWAP,
            self::TYPE_DRAFT_ORDER,
            self::TYPE_PAYMENT_LINK,
            self::TYPE_CLAIM,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('billing_address_id', $data ?? [], null);
        $this->setIfExists('billing_address', $data ?? [], null);
        $this->setIfExists('shipping_address_id', $data ?? [], null);
        $this->setIfExists('shipping_address', $data ?? [], null);
        $this->setIfExists('items', $data ?? [], null);
        $this->setIfExists('region_id', $data ?? [], null);
        $this->setIfExists('region', $data ?? [], null);
        $this->setIfExists('discounts', $data ?? [], null);
        $this->setIfExists('gift_cards', $data ?? [], null);
        $this->setIfExists('customer_id', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('payment_session', $data ?? [], null);
        $this->setIfExists('payment_sessions', $data ?? [], null);
        $this->setIfExists('payment_id', $data ?? [], null);
        $this->setIfExists('payment', $data ?? [], null);
        $this->setIfExists('shipping_methods', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], 'default');
        $this->setIfExists('completed_at', $data ?? [], null);
        $this->setIfExists('payment_authorized_at', $data ?? [], null);
        $this->setIfExists('idempotency_key', $data ?? [], null);
        $this->setIfExists('context', $data ?? [], null);
        $this->setIfExists('sales_channel_id', $data ?? [], null);
        $this->setIfExists('sales_channel', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('deleted_at', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('shipping_total', $data ?? [], null);
        $this->setIfExists('discount_total', $data ?? [], null);
        $this->setIfExists('raw_discount_total', $data ?? [], null);
        $this->setIfExists('item_tax_total', $data ?? [], null);
        $this->setIfExists('shipping_tax_total', $data ?? [], null);
        $this->setIfExists('tax_total', $data ?? [], null);
        $this->setIfExists('refunded_total', $data ?? [], null);
        $this->setIfExists('total', $data ?? [], null);
        $this->setIfExists('subtotal', $data ?? [], null);
        $this->setIfExists('refundable_amount', $data ?? [], null);
        $this->setIfExists('gift_card_total', $data ?? [], null);
        $this->setIfExists('gift_card_tax_total', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['billing_address_id'] === null) {
            $invalidProperties[] = "'billing_address_id' can't be null";
        }
        if ($this->container['shipping_address_id'] === null) {
            $invalidProperties[] = "'shipping_address_id' can't be null";
        }
        if ($this->container['region_id'] === null) {
            $invalidProperties[] = "'region_id' can't be null";
        }
        if ($this->container['customer_id'] === null) {
            $invalidProperties[] = "'customer_id' can't be null";
        }
        if ($this->container['payment_session'] === null) {
            $invalidProperties[] = "'payment_session' can't be null";
        }
        if ($this->container['payment_id'] === null) {
            $invalidProperties[] = "'payment_id' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['completed_at'] === null) {
            $invalidProperties[] = "'completed_at' can't be null";
        }
        if ($this->container['payment_authorized_at'] === null) {
            $invalidProperties[] = "'payment_authorized_at' can't be null";
        }
        if ($this->container['idempotency_key'] === null) {
            $invalidProperties[] = "'idempotency_key' can't be null";
        }
        if ($this->container['context'] === null) {
            $invalidProperties[] = "'context' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['deleted_at'] === null) {
            $invalidProperties[] = "'deleted_at' can't be null";
        }
        if ($this->container['metadata'] === null) {
            $invalidProperties[] = "'metadata' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The cart's ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email The email associated with the cart
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets billing_address_id
     *
     * @return string
     */
    public function getBillingAddressId()
    {
        return $this->container['billing_address_id'];
    }

    /**
     * Sets billing_address_id
     *
     * @param string $billing_address_id The billing address's ID
     *
     * @return self
     */
    public function setBillingAddressId($billing_address_id)
    {
        if (is_null($billing_address_id)) {
            array_push($this->openAPINullablesSetToNull, 'billing_address_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_address_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billing_address_id'] = $billing_address_id;

        return $this;
    }

    /**
     * Gets billing_address
     *
     * @return \MedusaWP\MedusaClient\Store\Model\Address|null
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     *
     * @param \MedusaWP\MedusaClient\Store\Model\Address|null $billing_address billing_address
     *
     * @return self
     */
    public function setBillingAddress($billing_address)
    {
        if (is_null($billing_address)) {
            throw new \InvalidArgumentException('non-nullable billing_address cannot be null');
        }
        $this->container['billing_address'] = $billing_address;

        return $this;
    }

    /**
     * Gets shipping_address_id
     *
     * @return string
     */
    public function getShippingAddressId()
    {
        return $this->container['shipping_address_id'];
    }

    /**
     * Sets shipping_address_id
     *
     * @param string $shipping_address_id The shipping address's ID
     *
     * @return self
     */
    public function setShippingAddressId($shipping_address_id)
    {
        if (is_null($shipping_address_id)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_address_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_address_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shipping_address_id'] = $shipping_address_id;

        return $this;
    }

    /**
     * Gets shipping_address
     *
     * @return \MedusaWP\MedusaClient\Store\Model\Address|null
     */
    public function getShippingAddress()
    {
        return $this->container['shipping_address'];
    }

    /**
     * Sets shipping_address
     *
     * @param \MedusaWP\MedusaClient\Store\Model\Address|null $shipping_address shipping_address
     *
     * @return self
     */
    public function setShippingAddress($shipping_address)
    {
        if (is_null($shipping_address)) {
            throw new \InvalidArgumentException('non-nullable shipping_address cannot be null');
        }
        $this->container['shipping_address'] = $shipping_address;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \MedusaWP\MedusaClient\Store\Model\LineItem[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \MedusaWP\MedusaClient\Store\Model\LineItem[]|null $items The line items added to the cart.
     *
     * @return self
     */
    public function setItems($items)
    {
        if (is_null($items)) {
            throw new \InvalidArgumentException('non-nullable items cannot be null');
        }
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets region_id
     *
     * @return string
     */
    public function getRegionId()
    {
        return $this->container['region_id'];
    }

    /**
     * Sets region_id
     *
     * @param string $region_id The region's ID
     *
     * @return self
     */
    public function setRegionId($region_id)
    {
        if (is_null($region_id)) {
            throw new \InvalidArgumentException('non-nullable region_id cannot be null');
        }
        $this->container['region_id'] = $region_id;

        return $this;
    }

    /**
     * Gets region
     *
     * @return \MedusaWP\MedusaClient\Store\Model\Region|null
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param \MedusaWP\MedusaClient\Store\Model\Region|null $region region
     *
     * @return self
     */
    public function setRegion($region)
    {
        if (is_null($region)) {
            throw new \InvalidArgumentException('non-nullable region cannot be null');
        }
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets discounts
     *
     * @return \MedusaWP\MedusaClient\Store\Model\Discount[]|null
     */
    public function getDiscounts()
    {
        return $this->container['discounts'];
    }

    /**
     * Sets discounts
     *
     * @param \MedusaWP\MedusaClient\Store\Model\Discount[]|null $discounts An array of details of all discounts applied to the cart.
     *
     * @return self
     */
    public function setDiscounts($discounts)
    {
        if (is_null($discounts)) {
            throw new \InvalidArgumentException('non-nullable discounts cannot be null');
        }
        $this->container['discounts'] = $discounts;

        return $this;
    }

    /**
     * Gets gift_cards
     *
     * @return \MedusaWP\MedusaClient\Store\Model\GiftCard[]|null
     */
    public function getGiftCards()
    {
        return $this->container['gift_cards'];
    }

    /**
     * Sets gift_cards
     *
     * @param \MedusaWP\MedusaClient\Store\Model\GiftCard[]|null $gift_cards An array of details of all gift cards applied to the cart.
     *
     * @return self
     */
    public function setGiftCards($gift_cards)
    {
        if (is_null($gift_cards)) {
            throw new \InvalidArgumentException('non-nullable gift_cards cannot be null');
        }
        $this->container['gift_cards'] = $gift_cards;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string $customer_id The customer's ID
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        if (is_null($customer_id)) {
            array_push($this->openAPINullablesSetToNull, 'customer_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \MedusaWP\MedusaClient\Store\Model\Customer|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \MedusaWP\MedusaClient\Store\Model\Customer|null $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets payment_session
     *
     * @return \MedusaWP\MedusaClient\Store\Model\PaymentSession
     */
    public function getPaymentSession()
    {
        return $this->container['payment_session'];
    }

    /**
     * Sets payment_session
     *
     * @param \MedusaWP\MedusaClient\Store\Model\PaymentSession $payment_session payment_session
     *
     * @return self
     */
    public function setPaymentSession($payment_session)
    {
        if (is_null($payment_session)) {
            throw new \InvalidArgumentException('non-nullable payment_session cannot be null');
        }
        $this->container['payment_session'] = $payment_session;

        return $this;
    }

    /**
     * Gets payment_sessions
     *
     * @return \MedusaWP\MedusaClient\Store\Model\PaymentSession[]|null
     */
    public function getPaymentSessions()
    {
        return $this->container['payment_sessions'];
    }

    /**
     * Sets payment_sessions
     *
     * @param \MedusaWP\MedusaClient\Store\Model\PaymentSession[]|null $payment_sessions The details of all payment sessions created on the cart.
     *
     * @return self
     */
    public function setPaymentSessions($payment_sessions)
    {
        if (is_null($payment_sessions)) {
            throw new \InvalidArgumentException('non-nullable payment_sessions cannot be null');
        }
        $this->container['payment_sessions'] = $payment_sessions;

        return $this;
    }

    /**
     * Gets payment_id
     *
     * @return string
     */
    public function getPaymentId()
    {
        return $this->container['payment_id'];
    }

    /**
     * Sets payment_id
     *
     * @param string $payment_id The payment's ID if available
     *
     * @return self
     */
    public function setPaymentId($payment_id)
    {
        if (is_null($payment_id)) {
            array_push($this->openAPINullablesSetToNull, 'payment_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_id'] = $payment_id;

        return $this;
    }

    /**
     * Gets payment
     *
     * @return \MedusaWP\MedusaClient\Store\Model\Payment|null
     */
    public function getPayment()
    {
        return $this->container['payment'];
    }

    /**
     * Sets payment
     *
     * @param \MedusaWP\MedusaClient\Store\Model\Payment|null $payment payment
     *
     * @return self
     */
    public function setPayment($payment)
    {
        if (is_null($payment)) {
            throw new \InvalidArgumentException('non-nullable payment cannot be null');
        }
        $this->container['payment'] = $payment;

        return $this;
    }

    /**
     * Gets shipping_methods
     *
     * @return \MedusaWP\MedusaClient\Store\Model\ShippingMethod[]|null
     */
    public function getShippingMethods()
    {
        return $this->container['shipping_methods'];
    }

    /**
     * Sets shipping_methods
     *
     * @param \MedusaWP\MedusaClient\Store\Model\ShippingMethod[]|null $shipping_methods The details of the shipping methods added to the cart.
     *
     * @return self
     */
    public function setShippingMethods($shipping_methods)
    {
        if (is_null($shipping_methods)) {
            throw new \InvalidArgumentException('non-nullable shipping_methods cannot be null');
        }
        $this->container['shipping_methods'] = $shipping_methods;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The cart's type.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets completed_at
     *
     * @return \DateTime
     */
    public function getCompletedAt()
    {
        return $this->container['completed_at'];
    }

    /**
     * Sets completed_at
     *
     * @param \DateTime $completed_at The date with timezone at which the cart was completed.
     *
     * @return self
     */
    public function setCompletedAt($completed_at)
    {
        if (is_null($completed_at)) {
            array_push($this->openAPINullablesSetToNull, 'completed_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('completed_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['completed_at'] = $completed_at;

        return $this;
    }

    /**
     * Gets payment_authorized_at
     *
     * @return \DateTime
     */
    public function getPaymentAuthorizedAt()
    {
        return $this->container['payment_authorized_at'];
    }

    /**
     * Sets payment_authorized_at
     *
     * @param \DateTime $payment_authorized_at The date with timezone at which the payment was authorized.
     *
     * @return self
     */
    public function setPaymentAuthorizedAt($payment_authorized_at)
    {
        if (is_null($payment_authorized_at)) {
            array_push($this->openAPINullablesSetToNull, 'payment_authorized_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_authorized_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_authorized_at'] = $payment_authorized_at;

        return $this;
    }

    /**
     * Gets idempotency_key
     *
     * @return string
     */
    public function getIdempotencyKey()
    {
        return $this->container['idempotency_key'];
    }

    /**
     * Sets idempotency_key
     *
     * @param string $idempotency_key Randomly generated key used to continue the completion of a cart in case of failure.
     *
     * @return self
     */
    public function setIdempotencyKey($idempotency_key)
    {
        if (is_null($idempotency_key)) {
            array_push($this->openAPINullablesSetToNull, 'idempotency_key');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('idempotency_key', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['idempotency_key'] = $idempotency_key;

        return $this;
    }

    /**
     * Gets context
     *
     * @return object
     */
    public function getContext()
    {
        return $this->container['context'];
    }

    /**
     * Sets context
     *
     * @param object $context The context of the cart which can include info like IP or user agent.
     *
     * @return self
     */
    public function setContext($context)
    {
        if (is_null($context)) {
            array_push($this->openAPINullablesSetToNull, 'context');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('context', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['context'] = $context;

        return $this;
    }

    /**
     * Gets sales_channel_id
     *
     * @return string|null
     */
    public function getSalesChannelId()
    {
        return $this->container['sales_channel_id'];
    }

    /**
     * Sets sales_channel_id
     *
     * @param string|null $sales_channel_id The sales channel ID the cart is associated with.
     *
     * @return self
     */
    public function setSalesChannelId($sales_channel_id)
    {
        if (is_null($sales_channel_id)) {
            array_push($this->openAPINullablesSetToNull, 'sales_channel_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_channel_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sales_channel_id'] = $sales_channel_id;

        return $this;
    }

    /**
     * Gets sales_channel
     *
     * @return \MedusaWP\MedusaClient\Store\Model\SalesChannel|null
     */
    public function getSalesChannel()
    {
        return $this->container['sales_channel'];
    }

    /**
     * Sets sales_channel
     *
     * @param \MedusaWP\MedusaClient\Store\Model\SalesChannel|null $sales_channel sales_channel
     *
     * @return self
     */
    public function setSalesChannel($sales_channel)
    {
        if (is_null($sales_channel)) {
            throw new \InvalidArgumentException('non-nullable sales_channel cannot be null');
        }
        $this->container['sales_channel'] = $sales_channel;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at The date with timezone at which the resource was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at The date with timezone at which the resource was updated.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets deleted_at
     *
     * @return \DateTime
     */
    public function getDeletedAt()
    {
        return $this->container['deleted_at'];
    }

    /**
     * Sets deleted_at
     *
     * @param \DateTime $deleted_at The date with timezone at which the resource was deleted.
     *
     * @return self
     */
    public function setDeletedAt($deleted_at)
    {
        if (is_null($deleted_at)) {
            array_push($this->openAPINullablesSetToNull, 'deleted_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deleted_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deleted_at'] = $deleted_at;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object $metadata An optional key-value map with additional details
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            array_push($this->openAPINullablesSetToNull, 'metadata');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metadata', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets shipping_total
     *
     * @return int|null
     */
    public function getShippingTotal()
    {
        return $this->container['shipping_total'];
    }

    /**
     * Sets shipping_total
     *
     * @param int|null $shipping_total The total of shipping
     *
     * @return self
     */
    public function setShippingTotal($shipping_total)
    {
        if (is_null($shipping_total)) {
            throw new \InvalidArgumentException('non-nullable shipping_total cannot be null');
        }
        $this->container['shipping_total'] = $shipping_total;

        return $this;
    }

    /**
     * Gets discount_total
     *
     * @return int|null
     */
    public function getDiscountTotal()
    {
        return $this->container['discount_total'];
    }

    /**
     * Sets discount_total
     *
     * @param int|null $discount_total The total of discount rounded
     *
     * @return self
     */
    public function setDiscountTotal($discount_total)
    {
        if (is_null($discount_total)) {
            throw new \InvalidArgumentException('non-nullable discount_total cannot be null');
        }
        $this->container['discount_total'] = $discount_total;

        return $this;
    }

    /**
     * Gets raw_discount_total
     *
     * @return int|null
     */
    public function getRawDiscountTotal()
    {
        return $this->container['raw_discount_total'];
    }

    /**
     * Sets raw_discount_total
     *
     * @param int|null $raw_discount_total The total of discount
     *
     * @return self
     */
    public function setRawDiscountTotal($raw_discount_total)
    {
        if (is_null($raw_discount_total)) {
            throw new \InvalidArgumentException('non-nullable raw_discount_total cannot be null');
        }
        $this->container['raw_discount_total'] = $raw_discount_total;

        return $this;
    }

    /**
     * Gets item_tax_total
     *
     * @return int|null
     */
    public function getItemTaxTotal()
    {
        return $this->container['item_tax_total'];
    }

    /**
     * Sets item_tax_total
     *
     * @param int|null $item_tax_total The total of items with taxes
     *
     * @return self
     */
    public function setItemTaxTotal($item_tax_total)
    {
        if (is_null($item_tax_total)) {
            throw new \InvalidArgumentException('non-nullable item_tax_total cannot be null');
        }
        $this->container['item_tax_total'] = $item_tax_total;

        return $this;
    }

    /**
     * Gets shipping_tax_total
     *
     * @return int|null
     */
    public function getShippingTaxTotal()
    {
        return $this->container['shipping_tax_total'];
    }

    /**
     * Sets shipping_tax_total
     *
     * @param int|null $shipping_tax_total The total of shipping with taxes
     *
     * @return self
     */
    public function setShippingTaxTotal($shipping_tax_total)
    {
        if (is_null($shipping_tax_total)) {
            throw new \InvalidArgumentException('non-nullable shipping_tax_total cannot be null');
        }
        $this->container['shipping_tax_total'] = $shipping_tax_total;

        return $this;
    }

    /**
     * Gets tax_total
     *
     * @return int|null
     */
    public function getTaxTotal()
    {
        return $this->container['tax_total'];
    }

    /**
     * Sets tax_total
     *
     * @param int|null $tax_total The total of tax
     *
     * @return self
     */
    public function setTaxTotal($tax_total)
    {
        if (is_null($tax_total)) {
            throw new \InvalidArgumentException('non-nullable tax_total cannot be null');
        }
        $this->container['tax_total'] = $tax_total;

        return $this;
    }

    /**
     * Gets refunded_total
     *
     * @return int|null
     */
    public function getRefundedTotal()
    {
        return $this->container['refunded_total'];
    }

    /**
     * Sets refunded_total
     *
     * @param int|null $refunded_total The total amount refunded if the order associated with this cart is returned.
     *
     * @return self
     */
    public function setRefundedTotal($refunded_total)
    {
        if (is_null($refunded_total)) {
            throw new \InvalidArgumentException('non-nullable refunded_total cannot be null');
        }
        $this->container['refunded_total'] = $refunded_total;

        return $this;
    }

    /**
     * Gets total
     *
     * @return int|null
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param int|null $total The total amount of the cart
     *
     * @return self
     */
    public function setTotal($total)
    {
        if (is_null($total)) {
            throw new \InvalidArgumentException('non-nullable total cannot be null');
        }
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets subtotal
     *
     * @return int|null
     */
    public function getSubtotal()
    {
        return $this->container['subtotal'];
    }

    /**
     * Sets subtotal
     *
     * @param int|null $subtotal The subtotal of the cart
     *
     * @return self
     */
    public function setSubtotal($subtotal)
    {
        if (is_null($subtotal)) {
            throw new \InvalidArgumentException('non-nullable subtotal cannot be null');
        }
        $this->container['subtotal'] = $subtotal;

        return $this;
    }

    /**
     * Gets refundable_amount
     *
     * @return int|null
     */
    public function getRefundableAmount()
    {
        return $this->container['refundable_amount'];
    }

    /**
     * Sets refundable_amount
     *
     * @param int|null $refundable_amount The amount that can be refunded
     *
     * @return self
     */
    public function setRefundableAmount($refundable_amount)
    {
        if (is_null($refundable_amount)) {
            throw new \InvalidArgumentException('non-nullable refundable_amount cannot be null');
        }
        $this->container['refundable_amount'] = $refundable_amount;

        return $this;
    }

    /**
     * Gets gift_card_total
     *
     * @return int|null
     */
    public function getGiftCardTotal()
    {
        return $this->container['gift_card_total'];
    }

    /**
     * Sets gift_card_total
     *
     * @param int|null $gift_card_total The total of gift cards
     *
     * @return self
     */
    public function setGiftCardTotal($gift_card_total)
    {
        if (is_null($gift_card_total)) {
            throw new \InvalidArgumentException('non-nullable gift_card_total cannot be null');
        }
        $this->container['gift_card_total'] = $gift_card_total;

        return $this;
    }

    /**
     * Gets gift_card_tax_total
     *
     * @return int|null
     */
    public function getGiftCardTaxTotal()
    {
        return $this->container['gift_card_tax_total'];
    }

    /**
     * Sets gift_card_tax_total
     *
     * @param int|null $gift_card_tax_total The total of gift cards with taxes
     *
     * @return self
     */
    public function setGiftCardTaxTotal($gift_card_tax_total)
    {
        if (is_null($gift_card_tax_total)) {
            throw new \InvalidArgumentException('non-nullable gift_card_tax_total cannot be null');
        }
        $this->container['gift_card_tax_total'] = $gift_card_tax_total;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


