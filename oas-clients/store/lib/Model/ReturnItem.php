<?php
/**
 * ReturnItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MedusaWP\MedusaClient\Store
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Medusa Storefront API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MedusaWP\MedusaClient\Store\Model;

use \ArrayAccess;
use \MedusaWP\MedusaClient\Store\ObjectSerializer;

/**
 * ReturnItem Class Doc Comment
 *
 * @category Class
 * @description A return item represents a line item in an order that is to be returned. It includes details related to the return and the reason behind it.
 * @package  MedusaWP\MedusaClient\Store
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ReturnItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ReturnItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'return_id' => 'string',
        'item_id' => 'string',
        'return_order' => '\MedusaWP\MedusaClient\Store\Model\ModelReturn',
        'item' => '\MedusaWP\MedusaClient\Store\Model\LineItem',
        'quantity' => 'int',
        'is_requested' => 'bool',
        'requested_quantity' => 'int',
        'received_quantity' => 'int',
        'reason_id' => 'string',
        'reason' => '\MedusaWP\MedusaClient\Store\Model\ReturnReason',
        'note' => 'string',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'return_id' => null,
        'item_id' => null,
        'return_order' => null,
        'item' => null,
        'quantity' => null,
        'is_requested' => null,
        'requested_quantity' => null,
        'received_quantity' => null,
        'reason_id' => null,
        'reason' => null,
        'note' => null,
        'metadata' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'return_id' => false,
		'item_id' => false,
		'return_order' => false,
		'item' => false,
		'quantity' => false,
		'is_requested' => false,
		'requested_quantity' => true,
		'received_quantity' => true,
		'reason_id' => true,
		'reason' => false,
		'note' => true,
		'metadata' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'return_id' => 'return_id',
        'item_id' => 'item_id',
        'return_order' => 'return_order',
        'item' => 'item',
        'quantity' => 'quantity',
        'is_requested' => 'is_requested',
        'requested_quantity' => 'requested_quantity',
        'received_quantity' => 'received_quantity',
        'reason_id' => 'reason_id',
        'reason' => 'reason',
        'note' => 'note',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'return_id' => 'setReturnId',
        'item_id' => 'setItemId',
        'return_order' => 'setReturnOrder',
        'item' => 'setItem',
        'quantity' => 'setQuantity',
        'is_requested' => 'setIsRequested',
        'requested_quantity' => 'setRequestedQuantity',
        'received_quantity' => 'setReceivedQuantity',
        'reason_id' => 'setReasonId',
        'reason' => 'setReason',
        'note' => 'setNote',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'return_id' => 'getReturnId',
        'item_id' => 'getItemId',
        'return_order' => 'getReturnOrder',
        'item' => 'getItem',
        'quantity' => 'getQuantity',
        'is_requested' => 'getIsRequested',
        'requested_quantity' => 'getRequestedQuantity',
        'received_quantity' => 'getReceivedQuantity',
        'reason_id' => 'getReasonId',
        'reason' => 'getReason',
        'note' => 'getNote',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('return_id', $data ?? [], null);
        $this->setIfExists('item_id', $data ?? [], null);
        $this->setIfExists('return_order', $data ?? [], null);
        $this->setIfExists('item', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('is_requested', $data ?? [], true);
        $this->setIfExists('requested_quantity', $data ?? [], null);
        $this->setIfExists('received_quantity', $data ?? [], null);
        $this->setIfExists('reason_id', $data ?? [], null);
        $this->setIfExists('reason', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['return_id'] === null) {
            $invalidProperties[] = "'return_id' can't be null";
        }
        if ($this->container['item_id'] === null) {
            $invalidProperties[] = "'item_id' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if ($this->container['is_requested'] === null) {
            $invalidProperties[] = "'is_requested' can't be null";
        }
        if ($this->container['requested_quantity'] === null) {
            $invalidProperties[] = "'requested_quantity' can't be null";
        }
        if ($this->container['received_quantity'] === null) {
            $invalidProperties[] = "'received_quantity' can't be null";
        }
        if ($this->container['reason_id'] === null) {
            $invalidProperties[] = "'reason_id' can't be null";
        }
        if ($this->container['note'] === null) {
            $invalidProperties[] = "'note' can't be null";
        }
        if ($this->container['metadata'] === null) {
            $invalidProperties[] = "'metadata' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets return_id
     *
     * @return string
     */
    public function getReturnId()
    {
        return $this->container['return_id'];
    }

    /**
     * Sets return_id
     *
     * @param string $return_id The ID of the Return that the Return Item belongs to.
     *
     * @return self
     */
    public function setReturnId($return_id)
    {
        if (is_null($return_id)) {
            throw new \InvalidArgumentException('non-nullable return_id cannot be null');
        }
        $this->container['return_id'] = $return_id;

        return $this;
    }

    /**
     * Gets item_id
     *
     * @return string
     */
    public function getItemId()
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param string $item_id The ID of the Line Item that the Return Item references.
     *
     * @return self
     */
    public function setItemId($item_id)
    {
        if (is_null($item_id)) {
            throw new \InvalidArgumentException('non-nullable item_id cannot be null');
        }
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets return_order
     *
     * @return \MedusaWP\MedusaClient\Store\Model\ModelReturn|null
     */
    public function getReturnOrder()
    {
        return $this->container['return_order'];
    }

    /**
     * Sets return_order
     *
     * @param \MedusaWP\MedusaClient\Store\Model\ModelReturn|null $return_order return_order
     *
     * @return self
     */
    public function setReturnOrder($return_order)
    {
        if (is_null($return_order)) {
            throw new \InvalidArgumentException('non-nullable return_order cannot be null');
        }
        $this->container['return_order'] = $return_order;

        return $this;
    }

    /**
     * Gets item
     *
     * @return \MedusaWP\MedusaClient\Store\Model\LineItem|null
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param \MedusaWP\MedusaClient\Store\Model\LineItem|null $item item
     *
     * @return self
     */
    public function setItem($item)
    {
        if (is_null($item)) {
            throw new \InvalidArgumentException('non-nullable item cannot be null');
        }
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity The quantity of the Line Item to be returned.
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets is_requested
     *
     * @return bool
     */
    public function getIsRequested()
    {
        return $this->container['is_requested'];
    }

    /**
     * Sets is_requested
     *
     * @param bool $is_requested Whether the Return Item was requested initially or received unexpectedly in the warehouse.
     *
     * @return self
     */
    public function setIsRequested($is_requested)
    {
        if (is_null($is_requested)) {
            throw new \InvalidArgumentException('non-nullable is_requested cannot be null');
        }
        $this->container['is_requested'] = $is_requested;

        return $this;
    }

    /**
     * Gets requested_quantity
     *
     * @return int
     */
    public function getRequestedQuantity()
    {
        return $this->container['requested_quantity'];
    }

    /**
     * Sets requested_quantity
     *
     * @param int $requested_quantity The quantity that was originally requested to be returned.
     *
     * @return self
     */
    public function setRequestedQuantity($requested_quantity)
    {
        if (is_null($requested_quantity)) {
            array_push($this->openAPINullablesSetToNull, 'requested_quantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('requested_quantity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['requested_quantity'] = $requested_quantity;

        return $this;
    }

    /**
     * Gets received_quantity
     *
     * @return int
     */
    public function getReceivedQuantity()
    {
        return $this->container['received_quantity'];
    }

    /**
     * Sets received_quantity
     *
     * @param int $received_quantity The quantity that was received in the warehouse.
     *
     * @return self
     */
    public function setReceivedQuantity($received_quantity)
    {
        if (is_null($received_quantity)) {
            array_push($this->openAPINullablesSetToNull, 'received_quantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('received_quantity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['received_quantity'] = $received_quantity;

        return $this;
    }

    /**
     * Gets reason_id
     *
     * @return string
     */
    public function getReasonId()
    {
        return $this->container['reason_id'];
    }

    /**
     * Sets reason_id
     *
     * @param string $reason_id The ID of the reason for returning the item.
     *
     * @return self
     */
    public function setReasonId($reason_id)
    {
        if (is_null($reason_id)) {
            array_push($this->openAPINullablesSetToNull, 'reason_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reason_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reason_id'] = $reason_id;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return \MedusaWP\MedusaClient\Store\Model\ReturnReason|null
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param \MedusaWP\MedusaClient\Store\Model\ReturnReason|null $reason reason
     *
     * @return self
     */
    public function setReason($reason)
    {
        if (is_null($reason)) {
            throw new \InvalidArgumentException('non-nullable reason cannot be null');
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note An optional note with additional details about the Return.
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            array_push($this->openAPINullablesSetToNull, 'note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('note', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object $metadata An optional key-value map with additional details
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            array_push($this->openAPINullablesSetToNull, 'metadata');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metadata', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


