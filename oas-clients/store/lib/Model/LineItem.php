<?php
/**
 * LineItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MedusaWP\MedusaClient\Store
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Medusa Storefront API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MedusaWP\MedusaClient\Store\Model;

use \ArrayAccess;
use \MedusaWP\MedusaClient\Store\ObjectSerializer;

/**
 * LineItem Class Doc Comment
 *
 * @category Class
 * @description Line Items are created when a product is added to a Cart. When Line Items are purchased they will get copied to the resulting order, swap, or claim, and can eventually be referenced in Fulfillments and Returns. Line items may also be used for order edits.
 * @package  MedusaWP\MedusaClient\Store
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LineItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LineItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'cart_id' => 'string',
        'cart' => '\MedusaWP\MedusaClient\Store\Model\Cart',
        'order_id' => 'string',
        'order' => '\MedusaWP\MedusaClient\Store\Model\Order',
        'swap_id' => 'string',
        'swap' => '\MedusaWP\MedusaClient\Store\Model\Swap',
        'claim_order_id' => 'string',
        'claim_order' => '\MedusaWP\MedusaClient\Store\Model\ClaimOrder',
        'tax_lines' => '\MedusaWP\MedusaClient\Store\Model\LineItemTaxLine[]',
        'adjustments' => '\MedusaWP\MedusaClient\Store\Model\LineItemAdjustment[]',
        'original_item_id' => 'string',
        'order_edit_id' => 'string',
        'order_edit' => '\MedusaWP\MedusaClient\Store\Model\OrderEdit',
        'title' => 'string',
        'description' => 'string',
        'thumbnail' => 'string',
        'is_return' => 'bool',
        'is_giftcard' => 'bool',
        'should_merge' => 'bool',
        'allow_discounts' => 'bool',
        'has_shipping' => 'bool',
        'unit_price' => 'int',
        'variant_id' => 'string',
        'variant' => '\MedusaWP\MedusaClient\Store\Model\ProductVariant',
        'quantity' => 'int',
        'fulfilled_quantity' => 'int',
        'returned_quantity' => 'int',
        'shipped_quantity' => 'int',
        'refundable' => 'int',
        'subtotal' => 'int',
        'tax_total' => 'int',
        'total' => 'int',
        'original_total' => 'int',
        'original_tax_total' => 'int',
        'discount_total' => 'int',
        'raw_discount_total' => 'int',
        'gift_card_total' => 'int',
        'includes_tax' => 'bool',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'cart_id' => null,
        'cart' => null,
        'order_id' => null,
        'order' => null,
        'swap_id' => null,
        'swap' => null,
        'claim_order_id' => null,
        'claim_order' => null,
        'tax_lines' => null,
        'adjustments' => null,
        'original_item_id' => null,
        'order_edit_id' => null,
        'order_edit' => null,
        'title' => null,
        'description' => null,
        'thumbnail' => 'uri',
        'is_return' => null,
        'is_giftcard' => null,
        'should_merge' => null,
        'allow_discounts' => null,
        'has_shipping' => null,
        'unit_price' => null,
        'variant_id' => null,
        'variant' => null,
        'quantity' => null,
        'fulfilled_quantity' => null,
        'returned_quantity' => null,
        'shipped_quantity' => null,
        'refundable' => null,
        'subtotal' => null,
        'tax_total' => null,
        'total' => null,
        'original_total' => null,
        'original_tax_total' => null,
        'discount_total' => null,
        'raw_discount_total' => null,
        'gift_card_total' => null,
        'includes_tax' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'metadata' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'cart_id' => true,
		'cart' => false,
		'order_id' => true,
		'order' => false,
		'swap_id' => true,
		'swap' => false,
		'claim_order_id' => true,
		'claim_order' => false,
		'tax_lines' => false,
		'adjustments' => false,
		'original_item_id' => true,
		'order_edit_id' => true,
		'order_edit' => false,
		'title' => false,
		'description' => true,
		'thumbnail' => true,
		'is_return' => false,
		'is_giftcard' => false,
		'should_merge' => false,
		'allow_discounts' => false,
		'has_shipping' => true,
		'unit_price' => false,
		'variant_id' => true,
		'variant' => false,
		'quantity' => false,
		'fulfilled_quantity' => true,
		'returned_quantity' => true,
		'shipped_quantity' => true,
		'refundable' => false,
		'subtotal' => false,
		'tax_total' => false,
		'total' => false,
		'original_total' => false,
		'original_tax_total' => false,
		'discount_total' => false,
		'raw_discount_total' => false,
		'gift_card_total' => false,
		'includes_tax' => false,
		'created_at' => false,
		'updated_at' => false,
		'metadata' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'cart_id' => 'cart_id',
        'cart' => 'cart',
        'order_id' => 'order_id',
        'order' => 'order',
        'swap_id' => 'swap_id',
        'swap' => 'swap',
        'claim_order_id' => 'claim_order_id',
        'claim_order' => 'claim_order',
        'tax_lines' => 'tax_lines',
        'adjustments' => 'adjustments',
        'original_item_id' => 'original_item_id',
        'order_edit_id' => 'order_edit_id',
        'order_edit' => 'order_edit',
        'title' => 'title',
        'description' => 'description',
        'thumbnail' => 'thumbnail',
        'is_return' => 'is_return',
        'is_giftcard' => 'is_giftcard',
        'should_merge' => 'should_merge',
        'allow_discounts' => 'allow_discounts',
        'has_shipping' => 'has_shipping',
        'unit_price' => 'unit_price',
        'variant_id' => 'variant_id',
        'variant' => 'variant',
        'quantity' => 'quantity',
        'fulfilled_quantity' => 'fulfilled_quantity',
        'returned_quantity' => 'returned_quantity',
        'shipped_quantity' => 'shipped_quantity',
        'refundable' => 'refundable',
        'subtotal' => 'subtotal',
        'tax_total' => 'tax_total',
        'total' => 'total',
        'original_total' => 'original_total',
        'original_tax_total' => 'original_tax_total',
        'discount_total' => 'discount_total',
        'raw_discount_total' => 'raw_discount_total',
        'gift_card_total' => 'gift_card_total',
        'includes_tax' => 'includes_tax',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'cart_id' => 'setCartId',
        'cart' => 'setCart',
        'order_id' => 'setOrderId',
        'order' => 'setOrder',
        'swap_id' => 'setSwapId',
        'swap' => 'setSwap',
        'claim_order_id' => 'setClaimOrderId',
        'claim_order' => 'setClaimOrder',
        'tax_lines' => 'setTaxLines',
        'adjustments' => 'setAdjustments',
        'original_item_id' => 'setOriginalItemId',
        'order_edit_id' => 'setOrderEditId',
        'order_edit' => 'setOrderEdit',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'thumbnail' => 'setThumbnail',
        'is_return' => 'setIsReturn',
        'is_giftcard' => 'setIsGiftcard',
        'should_merge' => 'setShouldMerge',
        'allow_discounts' => 'setAllowDiscounts',
        'has_shipping' => 'setHasShipping',
        'unit_price' => 'setUnitPrice',
        'variant_id' => 'setVariantId',
        'variant' => 'setVariant',
        'quantity' => 'setQuantity',
        'fulfilled_quantity' => 'setFulfilledQuantity',
        'returned_quantity' => 'setReturnedQuantity',
        'shipped_quantity' => 'setShippedQuantity',
        'refundable' => 'setRefundable',
        'subtotal' => 'setSubtotal',
        'tax_total' => 'setTaxTotal',
        'total' => 'setTotal',
        'original_total' => 'setOriginalTotal',
        'original_tax_total' => 'setOriginalTaxTotal',
        'discount_total' => 'setDiscountTotal',
        'raw_discount_total' => 'setRawDiscountTotal',
        'gift_card_total' => 'setGiftCardTotal',
        'includes_tax' => 'setIncludesTax',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'cart_id' => 'getCartId',
        'cart' => 'getCart',
        'order_id' => 'getOrderId',
        'order' => 'getOrder',
        'swap_id' => 'getSwapId',
        'swap' => 'getSwap',
        'claim_order_id' => 'getClaimOrderId',
        'claim_order' => 'getClaimOrder',
        'tax_lines' => 'getTaxLines',
        'adjustments' => 'getAdjustments',
        'original_item_id' => 'getOriginalItemId',
        'order_edit_id' => 'getOrderEditId',
        'order_edit' => 'getOrderEdit',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'thumbnail' => 'getThumbnail',
        'is_return' => 'getIsReturn',
        'is_giftcard' => 'getIsGiftcard',
        'should_merge' => 'getShouldMerge',
        'allow_discounts' => 'getAllowDiscounts',
        'has_shipping' => 'getHasShipping',
        'unit_price' => 'getUnitPrice',
        'variant_id' => 'getVariantId',
        'variant' => 'getVariant',
        'quantity' => 'getQuantity',
        'fulfilled_quantity' => 'getFulfilledQuantity',
        'returned_quantity' => 'getReturnedQuantity',
        'shipped_quantity' => 'getShippedQuantity',
        'refundable' => 'getRefundable',
        'subtotal' => 'getSubtotal',
        'tax_total' => 'getTaxTotal',
        'total' => 'getTotal',
        'original_total' => 'getOriginalTotal',
        'original_tax_total' => 'getOriginalTaxTotal',
        'discount_total' => 'getDiscountTotal',
        'raw_discount_total' => 'getRawDiscountTotal',
        'gift_card_total' => 'getGiftCardTotal',
        'includes_tax' => 'getIncludesTax',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('cart_id', $data ?? [], null);
        $this->setIfExists('cart', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('swap_id', $data ?? [], null);
        $this->setIfExists('swap', $data ?? [], null);
        $this->setIfExists('claim_order_id', $data ?? [], null);
        $this->setIfExists('claim_order', $data ?? [], null);
        $this->setIfExists('tax_lines', $data ?? [], null);
        $this->setIfExists('adjustments', $data ?? [], null);
        $this->setIfExists('original_item_id', $data ?? [], null);
        $this->setIfExists('order_edit_id', $data ?? [], null);
        $this->setIfExists('order_edit', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('thumbnail', $data ?? [], null);
        $this->setIfExists('is_return', $data ?? [], false);
        $this->setIfExists('is_giftcard', $data ?? [], false);
        $this->setIfExists('should_merge', $data ?? [], true);
        $this->setIfExists('allow_discounts', $data ?? [], true);
        $this->setIfExists('has_shipping', $data ?? [], null);
        $this->setIfExists('unit_price', $data ?? [], null);
        $this->setIfExists('variant_id', $data ?? [], null);
        $this->setIfExists('variant', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('fulfilled_quantity', $data ?? [], null);
        $this->setIfExists('returned_quantity', $data ?? [], null);
        $this->setIfExists('shipped_quantity', $data ?? [], null);
        $this->setIfExists('refundable', $data ?? [], null);
        $this->setIfExists('subtotal', $data ?? [], null);
        $this->setIfExists('tax_total', $data ?? [], null);
        $this->setIfExists('total', $data ?? [], null);
        $this->setIfExists('original_total', $data ?? [], null);
        $this->setIfExists('original_tax_total', $data ?? [], null);
        $this->setIfExists('discount_total', $data ?? [], null);
        $this->setIfExists('raw_discount_total', $data ?? [], null);
        $this->setIfExists('gift_card_total', $data ?? [], null);
        $this->setIfExists('includes_tax', $data ?? [], false);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['cart_id'] === null) {
            $invalidProperties[] = "'cart_id' can't be null";
        }
        if ($this->container['order_id'] === null) {
            $invalidProperties[] = "'order_id' can't be null";
        }
        if ($this->container['swap_id'] === null) {
            $invalidProperties[] = "'swap_id' can't be null";
        }
        if ($this->container['claim_order_id'] === null) {
            $invalidProperties[] = "'claim_order_id' can't be null";
        }
        if ($this->container['original_item_id'] === null) {
            $invalidProperties[] = "'original_item_id' can't be null";
        }
        if ($this->container['order_edit_id'] === null) {
            $invalidProperties[] = "'order_edit_id' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['thumbnail'] === null) {
            $invalidProperties[] = "'thumbnail' can't be null";
        }
        if ($this->container['is_return'] === null) {
            $invalidProperties[] = "'is_return' can't be null";
        }
        if ($this->container['is_giftcard'] === null) {
            $invalidProperties[] = "'is_giftcard' can't be null";
        }
        if ($this->container['should_merge'] === null) {
            $invalidProperties[] = "'should_merge' can't be null";
        }
        if ($this->container['allow_discounts'] === null) {
            $invalidProperties[] = "'allow_discounts' can't be null";
        }
        if ($this->container['has_shipping'] === null) {
            $invalidProperties[] = "'has_shipping' can't be null";
        }
        if ($this->container['unit_price'] === null) {
            $invalidProperties[] = "'unit_price' can't be null";
        }
        if ($this->container['variant_id'] === null) {
            $invalidProperties[] = "'variant_id' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if ($this->container['fulfilled_quantity'] === null) {
            $invalidProperties[] = "'fulfilled_quantity' can't be null";
        }
        if ($this->container['returned_quantity'] === null) {
            $invalidProperties[] = "'returned_quantity' can't be null";
        }
        if ($this->container['shipped_quantity'] === null) {
            $invalidProperties[] = "'shipped_quantity' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['metadata'] === null) {
            $invalidProperties[] = "'metadata' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The line item's ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets cart_id
     *
     * @return string
     */
    public function getCartId()
    {
        return $this->container['cart_id'];
    }

    /**
     * Sets cart_id
     *
     * @param string $cart_id The ID of the cart that the line item may belongs to.
     *
     * @return self
     */
    public function setCartId($cart_id)
    {
        if (is_null($cart_id)) {
            array_push($this->openAPINullablesSetToNull, 'cart_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cart_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cart_id'] = $cart_id;

        return $this;
    }

    /**
     * Gets cart
     *
     * @return \MedusaWP\MedusaClient\Store\Model\Cart|null
     */
    public function getCart()
    {
        return $this->container['cart'];
    }

    /**
     * Sets cart
     *
     * @param \MedusaWP\MedusaClient\Store\Model\Cart|null $cart cart
     *
     * @return self
     */
    public function setCart($cart)
    {
        if (is_null($cart)) {
            throw new \InvalidArgumentException('non-nullable cart cannot be null');
        }
        $this->container['cart'] = $cart;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string $order_id The ID of the order that the line item may belongs to.
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            array_push($this->openAPINullablesSetToNull, 'order_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets order
     *
     * @return \MedusaWP\MedusaClient\Store\Model\Order|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param \MedusaWP\MedusaClient\Store\Model\Order|null $order order
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            throw new \InvalidArgumentException('non-nullable order cannot be null');
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets swap_id
     *
     * @return string
     */
    public function getSwapId()
    {
        return $this->container['swap_id'];
    }

    /**
     * Sets swap_id
     *
     * @param string $swap_id The ID of the swap that the line item may belong to.
     *
     * @return self
     */
    public function setSwapId($swap_id)
    {
        if (is_null($swap_id)) {
            array_push($this->openAPINullablesSetToNull, 'swap_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('swap_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['swap_id'] = $swap_id;

        return $this;
    }

    /**
     * Gets swap
     *
     * @return \MedusaWP\MedusaClient\Store\Model\Swap|null
     */
    public function getSwap()
    {
        return $this->container['swap'];
    }

    /**
     * Sets swap
     *
     * @param \MedusaWP\MedusaClient\Store\Model\Swap|null $swap swap
     *
     * @return self
     */
    public function setSwap($swap)
    {
        if (is_null($swap)) {
            throw new \InvalidArgumentException('non-nullable swap cannot be null');
        }
        $this->container['swap'] = $swap;

        return $this;
    }

    /**
     * Gets claim_order_id
     *
     * @return string
     */
    public function getClaimOrderId()
    {
        return $this->container['claim_order_id'];
    }

    /**
     * Sets claim_order_id
     *
     * @param string $claim_order_id The ID of the claim that the line item may belong to.
     *
     * @return self
     */
    public function setClaimOrderId($claim_order_id)
    {
        if (is_null($claim_order_id)) {
            array_push($this->openAPINullablesSetToNull, 'claim_order_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('claim_order_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['claim_order_id'] = $claim_order_id;

        return $this;
    }

    /**
     * Gets claim_order
     *
     * @return \MedusaWP\MedusaClient\Store\Model\ClaimOrder|null
     */
    public function getClaimOrder()
    {
        return $this->container['claim_order'];
    }

    /**
     * Sets claim_order
     *
     * @param \MedusaWP\MedusaClient\Store\Model\ClaimOrder|null $claim_order claim_order
     *
     * @return self
     */
    public function setClaimOrder($claim_order)
    {
        if (is_null($claim_order)) {
            throw new \InvalidArgumentException('non-nullable claim_order cannot be null');
        }
        $this->container['claim_order'] = $claim_order;

        return $this;
    }

    /**
     * Gets tax_lines
     *
     * @return \MedusaWP\MedusaClient\Store\Model\LineItemTaxLine[]|null
     */
    public function getTaxLines()
    {
        return $this->container['tax_lines'];
    }

    /**
     * Sets tax_lines
     *
     * @param \MedusaWP\MedusaClient\Store\Model\LineItemTaxLine[]|null $tax_lines The details of the item's tax lines.
     *
     * @return self
     */
    public function setTaxLines($tax_lines)
    {
        if (is_null($tax_lines)) {
            throw new \InvalidArgumentException('non-nullable tax_lines cannot be null');
        }
        $this->container['tax_lines'] = $tax_lines;

        return $this;
    }

    /**
     * Gets adjustments
     *
     * @return \MedusaWP\MedusaClient\Store\Model\LineItemAdjustment[]|null
     */
    public function getAdjustments()
    {
        return $this->container['adjustments'];
    }

    /**
     * Sets adjustments
     *
     * @param \MedusaWP\MedusaClient\Store\Model\LineItemAdjustment[]|null $adjustments The details of the item's adjustments, which are available when a discount is applied on the item.
     *
     * @return self
     */
    public function setAdjustments($adjustments)
    {
        if (is_null($adjustments)) {
            throw new \InvalidArgumentException('non-nullable adjustments cannot be null');
        }
        $this->container['adjustments'] = $adjustments;

        return $this;
    }

    /**
     * Gets original_item_id
     *
     * @return string
     */
    public function getOriginalItemId()
    {
        return $this->container['original_item_id'];
    }

    /**
     * Sets original_item_id
     *
     * @param string $original_item_id The ID of the original line item. This is useful if the line item belongs to a resource that references an order, such as a return or an order edit.
     *
     * @return self
     */
    public function setOriginalItemId($original_item_id)
    {
        if (is_null($original_item_id)) {
            array_push($this->openAPINullablesSetToNull, 'original_item_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('original_item_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['original_item_id'] = $original_item_id;

        return $this;
    }

    /**
     * Gets order_edit_id
     *
     * @return string
     */
    public function getOrderEditId()
    {
        return $this->container['order_edit_id'];
    }

    /**
     * Sets order_edit_id
     *
     * @param string $order_edit_id The ID of the order edit that the item may belong to.
     *
     * @return self
     */
    public function setOrderEditId($order_edit_id)
    {
        if (is_null($order_edit_id)) {
            array_push($this->openAPINullablesSetToNull, 'order_edit_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_edit_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['order_edit_id'] = $order_edit_id;

        return $this;
    }

    /**
     * Gets order_edit
     *
     * @return \MedusaWP\MedusaClient\Store\Model\OrderEdit|null
     */
    public function getOrderEdit()
    {
        return $this->container['order_edit'];
    }

    /**
     * Sets order_edit
     *
     * @param \MedusaWP\MedusaClient\Store\Model\OrderEdit|null $order_edit order_edit
     *
     * @return self
     */
    public function setOrderEdit($order_edit)
    {
        if (is_null($order_edit)) {
            throw new \InvalidArgumentException('non-nullable order_edit cannot be null');
        }
        $this->container['order_edit'] = $order_edit;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The title of the Line Item.
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description A more detailed description of the contents of the Line Item.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets thumbnail
     *
     * @return string
     */
    public function getThumbnail()
    {
        return $this->container['thumbnail'];
    }

    /**
     * Sets thumbnail
     *
     * @param string $thumbnail A URL string to a small image of the contents of the Line Item.
     *
     * @return self
     */
    public function setThumbnail($thumbnail)
    {
        if (is_null($thumbnail)) {
            array_push($this->openAPINullablesSetToNull, 'thumbnail');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('thumbnail', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['thumbnail'] = $thumbnail;

        return $this;
    }

    /**
     * Gets is_return
     *
     * @return bool
     */
    public function getIsReturn()
    {
        return $this->container['is_return'];
    }

    /**
     * Sets is_return
     *
     * @param bool $is_return Is the item being returned
     *
     * @return self
     */
    public function setIsReturn($is_return)
    {
        if (is_null($is_return)) {
            throw new \InvalidArgumentException('non-nullable is_return cannot be null');
        }
        $this->container['is_return'] = $is_return;

        return $this;
    }

    /**
     * Gets is_giftcard
     *
     * @return bool
     */
    public function getIsGiftcard()
    {
        return $this->container['is_giftcard'];
    }

    /**
     * Sets is_giftcard
     *
     * @param bool $is_giftcard Flag to indicate if the Line Item is a Gift Card.
     *
     * @return self
     */
    public function setIsGiftcard($is_giftcard)
    {
        if (is_null($is_giftcard)) {
            throw new \InvalidArgumentException('non-nullable is_giftcard cannot be null');
        }
        $this->container['is_giftcard'] = $is_giftcard;

        return $this;
    }

    /**
     * Gets should_merge
     *
     * @return bool
     */
    public function getShouldMerge()
    {
        return $this->container['should_merge'];
    }

    /**
     * Sets should_merge
     *
     * @param bool $should_merge Flag to indicate if new Line Items with the same variant should be merged or added as an additional Line Item.
     *
     * @return self
     */
    public function setShouldMerge($should_merge)
    {
        if (is_null($should_merge)) {
            throw new \InvalidArgumentException('non-nullable should_merge cannot be null');
        }
        $this->container['should_merge'] = $should_merge;

        return $this;
    }

    /**
     * Gets allow_discounts
     *
     * @return bool
     */
    public function getAllowDiscounts()
    {
        return $this->container['allow_discounts'];
    }

    /**
     * Sets allow_discounts
     *
     * @param bool $allow_discounts Flag to indicate if the Line Item should be included when doing discount calculations.
     *
     * @return self
     */
    public function setAllowDiscounts($allow_discounts)
    {
        if (is_null($allow_discounts)) {
            throw new \InvalidArgumentException('non-nullable allow_discounts cannot be null');
        }
        $this->container['allow_discounts'] = $allow_discounts;

        return $this;
    }

    /**
     * Gets has_shipping
     *
     * @return bool
     */
    public function getHasShipping()
    {
        return $this->container['has_shipping'];
    }

    /**
     * Sets has_shipping
     *
     * @param bool $has_shipping Flag to indicate if the Line Item has fulfillment associated with it.
     *
     * @return self
     */
    public function setHasShipping($has_shipping)
    {
        if (is_null($has_shipping)) {
            array_push($this->openAPINullablesSetToNull, 'has_shipping');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_shipping', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_shipping'] = $has_shipping;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return int
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param int $unit_price The price of one unit of the content in the Line Item. This should be in the currency defined by the Cart/Order/Swap/Claim that the Line Item belongs to.
     *
     * @return self
     */
    public function setUnitPrice($unit_price)
    {
        if (is_null($unit_price)) {
            throw new \InvalidArgumentException('non-nullable unit_price cannot be null');
        }
        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets variant_id
     *
     * @return string
     */
    public function getVariantId()
    {
        return $this->container['variant_id'];
    }

    /**
     * Sets variant_id
     *
     * @param string $variant_id The id of the Product Variant contained in the Line Item.
     *
     * @return self
     */
    public function setVariantId($variant_id)
    {
        if (is_null($variant_id)) {
            array_push($this->openAPINullablesSetToNull, 'variant_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('variant_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['variant_id'] = $variant_id;

        return $this;
    }

    /**
     * Gets variant
     *
     * @return \MedusaWP\MedusaClient\Store\Model\ProductVariant|null
     */
    public function getVariant()
    {
        return $this->container['variant'];
    }

    /**
     * Sets variant
     *
     * @param \MedusaWP\MedusaClient\Store\Model\ProductVariant|null $variant variant
     *
     * @return self
     */
    public function setVariant($variant)
    {
        if (is_null($variant)) {
            throw new \InvalidArgumentException('non-nullable variant cannot be null');
        }
        $this->container['variant'] = $variant;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity The quantity of the content in the Line Item.
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets fulfilled_quantity
     *
     * @return int
     */
    public function getFulfilledQuantity()
    {
        return $this->container['fulfilled_quantity'];
    }

    /**
     * Sets fulfilled_quantity
     *
     * @param int $fulfilled_quantity The quantity of the Line Item that has been fulfilled.
     *
     * @return self
     */
    public function setFulfilledQuantity($fulfilled_quantity)
    {
        if (is_null($fulfilled_quantity)) {
            array_push($this->openAPINullablesSetToNull, 'fulfilled_quantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fulfilled_quantity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fulfilled_quantity'] = $fulfilled_quantity;

        return $this;
    }

    /**
     * Gets returned_quantity
     *
     * @return int
     */
    public function getReturnedQuantity()
    {
        return $this->container['returned_quantity'];
    }

    /**
     * Sets returned_quantity
     *
     * @param int $returned_quantity The quantity of the Line Item that has been returned.
     *
     * @return self
     */
    public function setReturnedQuantity($returned_quantity)
    {
        if (is_null($returned_quantity)) {
            array_push($this->openAPINullablesSetToNull, 'returned_quantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('returned_quantity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['returned_quantity'] = $returned_quantity;

        return $this;
    }

    /**
     * Gets shipped_quantity
     *
     * @return int
     */
    public function getShippedQuantity()
    {
        return $this->container['shipped_quantity'];
    }

    /**
     * Sets shipped_quantity
     *
     * @param int $shipped_quantity The quantity of the Line Item that has been shipped.
     *
     * @return self
     */
    public function setShippedQuantity($shipped_quantity)
    {
        if (is_null($shipped_quantity)) {
            array_push($this->openAPINullablesSetToNull, 'shipped_quantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipped_quantity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shipped_quantity'] = $shipped_quantity;

        return $this;
    }

    /**
     * Gets refundable
     *
     * @return int|null
     */
    public function getRefundable()
    {
        return $this->container['refundable'];
    }

    /**
     * Sets refundable
     *
     * @param int|null $refundable The amount that can be refunded from the given Line Item. Takes taxes and discounts into consideration.
     *
     * @return self
     */
    public function setRefundable($refundable)
    {
        if (is_null($refundable)) {
            throw new \InvalidArgumentException('non-nullable refundable cannot be null');
        }
        $this->container['refundable'] = $refundable;

        return $this;
    }

    /**
     * Gets subtotal
     *
     * @return int|null
     */
    public function getSubtotal()
    {
        return $this->container['subtotal'];
    }

    /**
     * Sets subtotal
     *
     * @param int|null $subtotal The subtotal of the line item
     *
     * @return self
     */
    public function setSubtotal($subtotal)
    {
        if (is_null($subtotal)) {
            throw new \InvalidArgumentException('non-nullable subtotal cannot be null');
        }
        $this->container['subtotal'] = $subtotal;

        return $this;
    }

    /**
     * Gets tax_total
     *
     * @return int|null
     */
    public function getTaxTotal()
    {
        return $this->container['tax_total'];
    }

    /**
     * Sets tax_total
     *
     * @param int|null $tax_total The total of tax of the line item
     *
     * @return self
     */
    public function setTaxTotal($tax_total)
    {
        if (is_null($tax_total)) {
            throw new \InvalidArgumentException('non-nullable tax_total cannot be null');
        }
        $this->container['tax_total'] = $tax_total;

        return $this;
    }

    /**
     * Gets total
     *
     * @return int|null
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param int|null $total The total amount of the line item
     *
     * @return self
     */
    public function setTotal($total)
    {
        if (is_null($total)) {
            throw new \InvalidArgumentException('non-nullable total cannot be null');
        }
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets original_total
     *
     * @return int|null
     */
    public function getOriginalTotal()
    {
        return $this->container['original_total'];
    }

    /**
     * Sets original_total
     *
     * @param int|null $original_total The original total amount of the line item
     *
     * @return self
     */
    public function setOriginalTotal($original_total)
    {
        if (is_null($original_total)) {
            throw new \InvalidArgumentException('non-nullable original_total cannot be null');
        }
        $this->container['original_total'] = $original_total;

        return $this;
    }

    /**
     * Gets original_tax_total
     *
     * @return int|null
     */
    public function getOriginalTaxTotal()
    {
        return $this->container['original_tax_total'];
    }

    /**
     * Sets original_tax_total
     *
     * @param int|null $original_tax_total The original tax total amount of the line item
     *
     * @return self
     */
    public function setOriginalTaxTotal($original_tax_total)
    {
        if (is_null($original_tax_total)) {
            throw new \InvalidArgumentException('non-nullable original_tax_total cannot be null');
        }
        $this->container['original_tax_total'] = $original_tax_total;

        return $this;
    }

    /**
     * Gets discount_total
     *
     * @return int|null
     */
    public function getDiscountTotal()
    {
        return $this->container['discount_total'];
    }

    /**
     * Sets discount_total
     *
     * @param int|null $discount_total The total of discount of the line item rounded
     *
     * @return self
     */
    public function setDiscountTotal($discount_total)
    {
        if (is_null($discount_total)) {
            throw new \InvalidArgumentException('non-nullable discount_total cannot be null');
        }
        $this->container['discount_total'] = $discount_total;

        return $this;
    }

    /**
     * Gets raw_discount_total
     *
     * @return int|null
     */
    public function getRawDiscountTotal()
    {
        return $this->container['raw_discount_total'];
    }

    /**
     * Sets raw_discount_total
     *
     * @param int|null $raw_discount_total The total of discount of the line item
     *
     * @return self
     */
    public function setRawDiscountTotal($raw_discount_total)
    {
        if (is_null($raw_discount_total)) {
            throw new \InvalidArgumentException('non-nullable raw_discount_total cannot be null');
        }
        $this->container['raw_discount_total'] = $raw_discount_total;

        return $this;
    }

    /**
     * Gets gift_card_total
     *
     * @return int|null
     */
    public function getGiftCardTotal()
    {
        return $this->container['gift_card_total'];
    }

    /**
     * Sets gift_card_total
     *
     * @param int|null $gift_card_total The total of the gift card of the line item
     *
     * @return self
     */
    public function setGiftCardTotal($gift_card_total)
    {
        if (is_null($gift_card_total)) {
            throw new \InvalidArgumentException('non-nullable gift_card_total cannot be null');
        }
        $this->container['gift_card_total'] = $gift_card_total;

        return $this;
    }

    /**
     * Gets includes_tax
     *
     * @return bool|null
     */
    public function getIncludesTax()
    {
        return $this->container['includes_tax'];
    }

    /**
     * Sets includes_tax
     *
     * @param bool|null $includes_tax Indicates if the line item unit_price include tax
     *
     * @return self
     */
    public function setIncludesTax($includes_tax)
    {
        if (is_null($includes_tax)) {
            throw new \InvalidArgumentException('non-nullable includes_tax cannot be null');
        }
        $this->container['includes_tax'] = $includes_tax;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at The date with timezone at which the resource was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at The date with timezone at which the resource was updated.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object $metadata An optional key-value map with additional details
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            array_push($this->openAPINullablesSetToNull, 'metadata');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metadata', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


