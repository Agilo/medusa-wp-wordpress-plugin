<?php
/**
 * Fulfillment
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MedusaWP\MedusaClient\Store
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Medusa Storefront API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MedusaWP\MedusaClient\Store\Model;

use \ArrayAccess;
use \MedusaWP\MedusaClient\Store\ObjectSerializer;

/**
 * Fulfillment Class Doc Comment
 *
 * @category Class
 * @description A Fulfillment is created once an admin can prepare the purchased goods. Fulfillments will eventually be shipped and hold information about how to track shipments. Fulfillments are created through a fulfillment provider, which typically integrates a third-party shipping service. Fulfillments can be associated with orders, claims, swaps, and returns.
 * @package  MedusaWP\MedusaClient\Store
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Fulfillment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Fulfillment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'claim_order_id' => 'string',
        'claim_order' => '\MedusaWP\MedusaClient\Store\Model\ClaimOrder',
        'swap_id' => 'string',
        'swap' => '\MedusaWP\MedusaClient\Store\Model\Swap',
        'order_id' => 'string',
        'order' => '\MedusaWP\MedusaClient\Store\Model\Order',
        'provider_id' => 'string',
        'provider' => '\MedusaWP\MedusaClient\Store\Model\FulfillmentProvider',
        'location_id' => 'string',
        'items' => '\MedusaWP\MedusaClient\Store\Model\FulfillmentItem[]',
        'tracking_links' => '\MedusaWP\MedusaClient\Store\Model\TrackingLink[]',
        'tracking_numbers' => 'string[]',
        'data' => 'object',
        'shipped_at' => '\DateTime',
        'no_notification' => 'bool',
        'canceled_at' => '\DateTime',
        'idempotency_key' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'claim_order_id' => null,
        'claim_order' => null,
        'swap_id' => null,
        'swap' => null,
        'order_id' => null,
        'order' => null,
        'provider_id' => null,
        'provider' => null,
        'location_id' => null,
        'items' => null,
        'tracking_links' => null,
        'tracking_numbers' => null,
        'data' => null,
        'shipped_at' => 'date-time',
        'no_notification' => null,
        'canceled_at' => 'date-time',
        'idempotency_key' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'metadata' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'claim_order_id' => true,
		'claim_order' => false,
		'swap_id' => true,
		'swap' => false,
		'order_id' => true,
		'order' => false,
		'provider_id' => false,
		'provider' => false,
		'location_id' => true,
		'items' => false,
		'tracking_links' => false,
		'tracking_numbers' => false,
		'data' => false,
		'shipped_at' => true,
		'no_notification' => true,
		'canceled_at' => true,
		'idempotency_key' => true,
		'created_at' => false,
		'updated_at' => false,
		'metadata' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'claim_order_id' => 'claim_order_id',
        'claim_order' => 'claim_order',
        'swap_id' => 'swap_id',
        'swap' => 'swap',
        'order_id' => 'order_id',
        'order' => 'order',
        'provider_id' => 'provider_id',
        'provider' => 'provider',
        'location_id' => 'location_id',
        'items' => 'items',
        'tracking_links' => 'tracking_links',
        'tracking_numbers' => 'tracking_numbers',
        'data' => 'data',
        'shipped_at' => 'shipped_at',
        'no_notification' => 'no_notification',
        'canceled_at' => 'canceled_at',
        'idempotency_key' => 'idempotency_key',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'claim_order_id' => 'setClaimOrderId',
        'claim_order' => 'setClaimOrder',
        'swap_id' => 'setSwapId',
        'swap' => 'setSwap',
        'order_id' => 'setOrderId',
        'order' => 'setOrder',
        'provider_id' => 'setProviderId',
        'provider' => 'setProvider',
        'location_id' => 'setLocationId',
        'items' => 'setItems',
        'tracking_links' => 'setTrackingLinks',
        'tracking_numbers' => 'setTrackingNumbers',
        'data' => 'setData',
        'shipped_at' => 'setShippedAt',
        'no_notification' => 'setNoNotification',
        'canceled_at' => 'setCanceledAt',
        'idempotency_key' => 'setIdempotencyKey',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'claim_order_id' => 'getClaimOrderId',
        'claim_order' => 'getClaimOrder',
        'swap_id' => 'getSwapId',
        'swap' => 'getSwap',
        'order_id' => 'getOrderId',
        'order' => 'getOrder',
        'provider_id' => 'getProviderId',
        'provider' => 'getProvider',
        'location_id' => 'getLocationId',
        'items' => 'getItems',
        'tracking_links' => 'getTrackingLinks',
        'tracking_numbers' => 'getTrackingNumbers',
        'data' => 'getData',
        'shipped_at' => 'getShippedAt',
        'no_notification' => 'getNoNotification',
        'canceled_at' => 'getCanceledAt',
        'idempotency_key' => 'getIdempotencyKey',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('claim_order_id', $data ?? [], null);
        $this->setIfExists('claim_order', $data ?? [], null);
        $this->setIfExists('swap_id', $data ?? [], null);
        $this->setIfExists('swap', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('provider_id', $data ?? [], null);
        $this->setIfExists('provider', $data ?? [], null);
        $this->setIfExists('location_id', $data ?? [], null);
        $this->setIfExists('items', $data ?? [], null);
        $this->setIfExists('tracking_links', $data ?? [], null);
        $this->setIfExists('tracking_numbers', $data ?? [], null);
        $this->setIfExists('data', $data ?? [], null);
        $this->setIfExists('shipped_at', $data ?? [], null);
        $this->setIfExists('no_notification', $data ?? [], null);
        $this->setIfExists('canceled_at', $data ?? [], null);
        $this->setIfExists('idempotency_key', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['claim_order_id'] === null) {
            $invalidProperties[] = "'claim_order_id' can't be null";
        }
        if ($this->container['swap_id'] === null) {
            $invalidProperties[] = "'swap_id' can't be null";
        }
        if ($this->container['order_id'] === null) {
            $invalidProperties[] = "'order_id' can't be null";
        }
        if ($this->container['provider_id'] === null) {
            $invalidProperties[] = "'provider_id' can't be null";
        }
        if ($this->container['location_id'] === null) {
            $invalidProperties[] = "'location_id' can't be null";
        }
        if ($this->container['tracking_numbers'] === null) {
            $invalidProperties[] = "'tracking_numbers' can't be null";
        }
        if ($this->container['data'] === null) {
            $invalidProperties[] = "'data' can't be null";
        }
        if ($this->container['shipped_at'] === null) {
            $invalidProperties[] = "'shipped_at' can't be null";
        }
        if ($this->container['no_notification'] === null) {
            $invalidProperties[] = "'no_notification' can't be null";
        }
        if ($this->container['canceled_at'] === null) {
            $invalidProperties[] = "'canceled_at' can't be null";
        }
        if ($this->container['idempotency_key'] === null) {
            $invalidProperties[] = "'idempotency_key' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['metadata'] === null) {
            $invalidProperties[] = "'metadata' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The fulfillment's ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets claim_order_id
     *
     * @return string
     */
    public function getClaimOrderId()
    {
        return $this->container['claim_order_id'];
    }

    /**
     * Sets claim_order_id
     *
     * @param string $claim_order_id The ID of the Claim that the Fulfillment belongs to.
     *
     * @return self
     */
    public function setClaimOrderId($claim_order_id)
    {
        if (is_null($claim_order_id)) {
            array_push($this->openAPINullablesSetToNull, 'claim_order_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('claim_order_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['claim_order_id'] = $claim_order_id;

        return $this;
    }

    /**
     * Gets claim_order
     *
     * @return \MedusaWP\MedusaClient\Store\Model\ClaimOrder|null
     */
    public function getClaimOrder()
    {
        return $this->container['claim_order'];
    }

    /**
     * Sets claim_order
     *
     * @param \MedusaWP\MedusaClient\Store\Model\ClaimOrder|null $claim_order claim_order
     *
     * @return self
     */
    public function setClaimOrder($claim_order)
    {
        if (is_null($claim_order)) {
            throw new \InvalidArgumentException('non-nullable claim_order cannot be null');
        }
        $this->container['claim_order'] = $claim_order;

        return $this;
    }

    /**
     * Gets swap_id
     *
     * @return string
     */
    public function getSwapId()
    {
        return $this->container['swap_id'];
    }

    /**
     * Sets swap_id
     *
     * @param string $swap_id The ID of the Swap that the Fulfillment belongs to.
     *
     * @return self
     */
    public function setSwapId($swap_id)
    {
        if (is_null($swap_id)) {
            array_push($this->openAPINullablesSetToNull, 'swap_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('swap_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['swap_id'] = $swap_id;

        return $this;
    }

    /**
     * Gets swap
     *
     * @return \MedusaWP\MedusaClient\Store\Model\Swap|null
     */
    public function getSwap()
    {
        return $this->container['swap'];
    }

    /**
     * Sets swap
     *
     * @param \MedusaWP\MedusaClient\Store\Model\Swap|null $swap swap
     *
     * @return self
     */
    public function setSwap($swap)
    {
        if (is_null($swap)) {
            throw new \InvalidArgumentException('non-nullable swap cannot be null');
        }
        $this->container['swap'] = $swap;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string $order_id The ID of the Order that the Fulfillment belongs to.
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            array_push($this->openAPINullablesSetToNull, 'order_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets order
     *
     * @return \MedusaWP\MedusaClient\Store\Model\Order|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param \MedusaWP\MedusaClient\Store\Model\Order|null $order order
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            throw new \InvalidArgumentException('non-nullable order cannot be null');
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets provider_id
     *
     * @return string
     */
    public function getProviderId()
    {
        return $this->container['provider_id'];
    }

    /**
     * Sets provider_id
     *
     * @param string $provider_id The ID of the Fulfillment Provider responsible for handling the fulfillment.
     *
     * @return self
     */
    public function setProviderId($provider_id)
    {
        if (is_null($provider_id)) {
            throw new \InvalidArgumentException('non-nullable provider_id cannot be null');
        }
        $this->container['provider_id'] = $provider_id;

        return $this;
    }

    /**
     * Gets provider
     *
     * @return \MedusaWP\MedusaClient\Store\Model\FulfillmentProvider|null
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     *
     * @param \MedusaWP\MedusaClient\Store\Model\FulfillmentProvider|null $provider provider
     *
     * @return self
     */
    public function setProvider($provider)
    {
        if (is_null($provider)) {
            throw new \InvalidArgumentException('non-nullable provider cannot be null');
        }
        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return string
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param string $location_id The ID of the stock location the fulfillment will be shipped from
     *
     * @return self
     */
    public function setLocationId($location_id)
    {
        if (is_null($location_id)) {
            array_push($this->openAPINullablesSetToNull, 'location_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('location_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \MedusaWP\MedusaClient\Store\Model\FulfillmentItem[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \MedusaWP\MedusaClient\Store\Model\FulfillmentItem[]|null $items The Fulfillment Items in the Fulfillment. These hold information about how many of each Line Item has been fulfilled.
     *
     * @return self
     */
    public function setItems($items)
    {
        if (is_null($items)) {
            throw new \InvalidArgumentException('non-nullable items cannot be null');
        }
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets tracking_links
     *
     * @return \MedusaWP\MedusaClient\Store\Model\TrackingLink[]|null
     */
    public function getTrackingLinks()
    {
        return $this->container['tracking_links'];
    }

    /**
     * Sets tracking_links
     *
     * @param \MedusaWP\MedusaClient\Store\Model\TrackingLink[]|null $tracking_links The Tracking Links that can be used to track the status of the Fulfillment. These will usually be provided by the Fulfillment Provider.
     *
     * @return self
     */
    public function setTrackingLinks($tracking_links)
    {
        if (is_null($tracking_links)) {
            throw new \InvalidArgumentException('non-nullable tracking_links cannot be null');
        }
        $this->container['tracking_links'] = $tracking_links;

        return $this;
    }

    /**
     * Gets tracking_numbers
     *
     * @return string[]
     * @deprecated
     */
    public function getTrackingNumbers()
    {
        return $this->container['tracking_numbers'];
    }

    /**
     * Sets tracking_numbers
     *
     * @param string[] $tracking_numbers The tracking numbers that can be used to track the status of the fulfillment.
     *
     * @return self
     * @deprecated
     */
    public function setTrackingNumbers($tracking_numbers)
    {
        if (is_null($tracking_numbers)) {
            throw new \InvalidArgumentException('non-nullable tracking_numbers cannot be null');
        }
        $this->container['tracking_numbers'] = $tracking_numbers;

        return $this;
    }

    /**
     * Gets data
     *
     * @return object
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param object $data This contains all the data necessary for the Fulfillment provider to handle the fulfillment.
     *
     * @return self
     */
    public function setData($data)
    {
        if (is_null($data)) {
            throw new \InvalidArgumentException('non-nullable data cannot be null');
        }
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets shipped_at
     *
     * @return \DateTime
     */
    public function getShippedAt()
    {
        return $this->container['shipped_at'];
    }

    /**
     * Sets shipped_at
     *
     * @param \DateTime $shipped_at The date with timezone at which the Fulfillment was shipped.
     *
     * @return self
     */
    public function setShippedAt($shipped_at)
    {
        if (is_null($shipped_at)) {
            array_push($this->openAPINullablesSetToNull, 'shipped_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipped_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shipped_at'] = $shipped_at;

        return $this;
    }

    /**
     * Gets no_notification
     *
     * @return bool
     */
    public function getNoNotification()
    {
        return $this->container['no_notification'];
    }

    /**
     * Sets no_notification
     *
     * @param bool $no_notification Flag for describing whether or not notifications related to this should be sent.
     *
     * @return self
     */
    public function setNoNotification($no_notification)
    {
        if (is_null($no_notification)) {
            array_push($this->openAPINullablesSetToNull, 'no_notification');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('no_notification', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['no_notification'] = $no_notification;

        return $this;
    }

    /**
     * Gets canceled_at
     *
     * @return \DateTime
     */
    public function getCanceledAt()
    {
        return $this->container['canceled_at'];
    }

    /**
     * Sets canceled_at
     *
     * @param \DateTime $canceled_at The date with timezone at which the Fulfillment was canceled.
     *
     * @return self
     */
    public function setCanceledAt($canceled_at)
    {
        if (is_null($canceled_at)) {
            array_push($this->openAPINullablesSetToNull, 'canceled_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('canceled_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['canceled_at'] = $canceled_at;

        return $this;
    }

    /**
     * Gets idempotency_key
     *
     * @return string
     */
    public function getIdempotencyKey()
    {
        return $this->container['idempotency_key'];
    }

    /**
     * Sets idempotency_key
     *
     * @param string $idempotency_key Randomly generated key used to continue the completion of the fulfillment in case of failure.
     *
     * @return self
     */
    public function setIdempotencyKey($idempotency_key)
    {
        if (is_null($idempotency_key)) {
            array_push($this->openAPINullablesSetToNull, 'idempotency_key');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('idempotency_key', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['idempotency_key'] = $idempotency_key;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at The date with timezone at which the resource was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at The date with timezone at which the resource was updated.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object $metadata An optional key-value map with additional details
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            array_push($this->openAPINullablesSetToNull, 'metadata');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metadata', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


