<?php
/**
 * Region
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MedusaWP\MedusaClient\Store
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Medusa Storefront API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MedusaWP\MedusaClient\Store\Model;

use \ArrayAccess;
use \MedusaWP\MedusaClient\Store\ObjectSerializer;

/**
 * Region Class Doc Comment
 *
 * @category Class
 * @description A region holds settings specific to a geographical location, including the currency, tax rates, and fulfillment and payment providers. A Region can consist of multiple countries to accomodate common shopping settings across countries.
 * @package  MedusaWP\MedusaClient\Store
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Region implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Region';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'currency_code' => 'string',
        'currency' => '\MedusaWP\MedusaClient\Store\Model\Currency',
        'tax_rate' => 'float',
        'tax_rates' => '\MedusaWP\MedusaClient\Store\Model\TaxRate[]',
        'tax_code' => 'string',
        'gift_cards_taxable' => 'bool',
        'automatic_taxes' => 'bool',
        'countries' => '\MedusaWP\MedusaClient\Store\Model\Country[]',
        'tax_provider_id' => 'string',
        'tax_provider' => '\MedusaWP\MedusaClient\Store\Model\TaxProvider',
        'payment_providers' => '\MedusaWP\MedusaClient\Store\Model\PaymentProvider[]',
        'fulfillment_providers' => '\MedusaWP\MedusaClient\Store\Model\FulfillmentProvider[]',
        'includes_tax' => 'bool',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'deleted_at' => '\DateTime',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'currency_code' => null,
        'currency' => null,
        'tax_rate' => null,
        'tax_rates' => null,
        'tax_code' => null,
        'gift_cards_taxable' => null,
        'automatic_taxes' => null,
        'countries' => null,
        'tax_provider_id' => null,
        'tax_provider' => null,
        'payment_providers' => null,
        'fulfillment_providers' => null,
        'includes_tax' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'deleted_at' => 'date-time',
        'metadata' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'name' => false,
		'currency_code' => false,
		'currency' => false,
		'tax_rate' => false,
		'tax_rates' => false,
		'tax_code' => true,
		'gift_cards_taxable' => false,
		'automatic_taxes' => false,
		'countries' => false,
		'tax_provider_id' => true,
		'tax_provider' => false,
		'payment_providers' => false,
		'fulfillment_providers' => false,
		'includes_tax' => false,
		'created_at' => false,
		'updated_at' => false,
		'deleted_at' => true,
		'metadata' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'currency_code' => 'currency_code',
        'currency' => 'currency',
        'tax_rate' => 'tax_rate',
        'tax_rates' => 'tax_rates',
        'tax_code' => 'tax_code',
        'gift_cards_taxable' => 'gift_cards_taxable',
        'automatic_taxes' => 'automatic_taxes',
        'countries' => 'countries',
        'tax_provider_id' => 'tax_provider_id',
        'tax_provider' => 'tax_provider',
        'payment_providers' => 'payment_providers',
        'fulfillment_providers' => 'fulfillment_providers',
        'includes_tax' => 'includes_tax',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'deleted_at' => 'deleted_at',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'currency_code' => 'setCurrencyCode',
        'currency' => 'setCurrency',
        'tax_rate' => 'setTaxRate',
        'tax_rates' => 'setTaxRates',
        'tax_code' => 'setTaxCode',
        'gift_cards_taxable' => 'setGiftCardsTaxable',
        'automatic_taxes' => 'setAutomaticTaxes',
        'countries' => 'setCountries',
        'tax_provider_id' => 'setTaxProviderId',
        'tax_provider' => 'setTaxProvider',
        'payment_providers' => 'setPaymentProviders',
        'fulfillment_providers' => 'setFulfillmentProviders',
        'includes_tax' => 'setIncludesTax',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'deleted_at' => 'setDeletedAt',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'currency_code' => 'getCurrencyCode',
        'currency' => 'getCurrency',
        'tax_rate' => 'getTaxRate',
        'tax_rates' => 'getTaxRates',
        'tax_code' => 'getTaxCode',
        'gift_cards_taxable' => 'getGiftCardsTaxable',
        'automatic_taxes' => 'getAutomaticTaxes',
        'countries' => 'getCountries',
        'tax_provider_id' => 'getTaxProviderId',
        'tax_provider' => 'getTaxProvider',
        'payment_providers' => 'getPaymentProviders',
        'fulfillment_providers' => 'getFulfillmentProviders',
        'includes_tax' => 'getIncludesTax',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'deleted_at' => 'getDeletedAt',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('tax_rate', $data ?? [], null);
        $this->setIfExists('tax_rates', $data ?? [], null);
        $this->setIfExists('tax_code', $data ?? [], null);
        $this->setIfExists('gift_cards_taxable', $data ?? [], true);
        $this->setIfExists('automatic_taxes', $data ?? [], true);
        $this->setIfExists('countries', $data ?? [], null);
        $this->setIfExists('tax_provider_id', $data ?? [], null);
        $this->setIfExists('tax_provider', $data ?? [], null);
        $this->setIfExists('payment_providers', $data ?? [], null);
        $this->setIfExists('fulfillment_providers', $data ?? [], null);
        $this->setIfExists('includes_tax', $data ?? [], false);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('deleted_at', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['currency_code'] === null) {
            $invalidProperties[] = "'currency_code' can't be null";
        }
        if ($this->container['tax_rate'] === null) {
            $invalidProperties[] = "'tax_rate' can't be null";
        }
        if ($this->container['tax_code'] === null) {
            $invalidProperties[] = "'tax_code' can't be null";
        }
        if ($this->container['gift_cards_taxable'] === null) {
            $invalidProperties[] = "'gift_cards_taxable' can't be null";
        }
        if ($this->container['automatic_taxes'] === null) {
            $invalidProperties[] = "'automatic_taxes' can't be null";
        }
        if ($this->container['tax_provider_id'] === null) {
            $invalidProperties[] = "'tax_provider_id' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['deleted_at'] === null) {
            $invalidProperties[] = "'deleted_at' can't be null";
        }
        if ($this->container['metadata'] === null) {
            $invalidProperties[] = "'metadata' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The region's ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the region as displayed to the customer. If the Region only has one country it is recommended to write the country name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code The three character currency code used in the region.
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (is_null($currency_code)) {
            throw new \InvalidArgumentException('non-nullable currency_code cannot be null');
        }
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \MedusaWP\MedusaClient\Store\Model\Currency|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \MedusaWP\MedusaClient\Store\Model\Currency|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets tax_rate
     *
     * @return float
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     *
     * @param float $tax_rate The tax rate that should be charged on purchases in the Region.
     *
     * @return self
     */
    public function setTaxRate($tax_rate)
    {
        if (is_null($tax_rate)) {
            throw new \InvalidArgumentException('non-nullable tax_rate cannot be null');
        }
        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }

    /**
     * Gets tax_rates
     *
     * @return \MedusaWP\MedusaClient\Store\Model\TaxRate[]|null
     */
    public function getTaxRates()
    {
        return $this->container['tax_rates'];
    }

    /**
     * Sets tax_rates
     *
     * @param \MedusaWP\MedusaClient\Store\Model\TaxRate[]|null $tax_rates The details of the tax rates used in the region, aside from the default rate.
     *
     * @return self
     */
    public function setTaxRates($tax_rates)
    {
        if (is_null($tax_rates)) {
            throw new \InvalidArgumentException('non-nullable tax_rates cannot be null');
        }
        $this->container['tax_rates'] = $tax_rates;

        return $this;
    }

    /**
     * Gets tax_code
     *
     * @return string
     */
    public function getTaxCode()
    {
        return $this->container['tax_code'];
    }

    /**
     * Sets tax_code
     *
     * @param string $tax_code The tax code used on purchases in the Region. This may be used by other systems for accounting purposes.
     *
     * @return self
     */
    public function setTaxCode($tax_code)
    {
        if (is_null($tax_code)) {
            array_push($this->openAPINullablesSetToNull, 'tax_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tax_code'] = $tax_code;

        return $this;
    }

    /**
     * Gets gift_cards_taxable
     *
     * @return bool
     */
    public function getGiftCardsTaxable()
    {
        return $this->container['gift_cards_taxable'];
    }

    /**
     * Sets gift_cards_taxable
     *
     * @param bool $gift_cards_taxable Whether the gift cards are taxable or not in this region.
     *
     * @return self
     */
    public function setGiftCardsTaxable($gift_cards_taxable)
    {
        if (is_null($gift_cards_taxable)) {
            throw new \InvalidArgumentException('non-nullable gift_cards_taxable cannot be null');
        }
        $this->container['gift_cards_taxable'] = $gift_cards_taxable;

        return $this;
    }

    /**
     * Gets automatic_taxes
     *
     * @return bool
     */
    public function getAutomaticTaxes()
    {
        return $this->container['automatic_taxes'];
    }

    /**
     * Sets automatic_taxes
     *
     * @param bool $automatic_taxes Whether taxes should be automated in this region.
     *
     * @return self
     */
    public function setAutomaticTaxes($automatic_taxes)
    {
        if (is_null($automatic_taxes)) {
            throw new \InvalidArgumentException('non-nullable automatic_taxes cannot be null');
        }
        $this->container['automatic_taxes'] = $automatic_taxes;

        return $this;
    }

    /**
     * Gets countries
     *
     * @return \MedusaWP\MedusaClient\Store\Model\Country[]|null
     */
    public function getCountries()
    {
        return $this->container['countries'];
    }

    /**
     * Sets countries
     *
     * @param \MedusaWP\MedusaClient\Store\Model\Country[]|null $countries The details of the countries included in this region.
     *
     * @return self
     */
    public function setCountries($countries)
    {
        if (is_null($countries)) {
            throw new \InvalidArgumentException('non-nullable countries cannot be null');
        }
        $this->container['countries'] = $countries;

        return $this;
    }

    /**
     * Gets tax_provider_id
     *
     * @return string
     */
    public function getTaxProviderId()
    {
        return $this->container['tax_provider_id'];
    }

    /**
     * Sets tax_provider_id
     *
     * @param string $tax_provider_id The ID of the tax provider used in this region
     *
     * @return self
     */
    public function setTaxProviderId($tax_provider_id)
    {
        if (is_null($tax_provider_id)) {
            array_push($this->openAPINullablesSetToNull, 'tax_provider_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_provider_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tax_provider_id'] = $tax_provider_id;

        return $this;
    }

    /**
     * Gets tax_provider
     *
     * @return \MedusaWP\MedusaClient\Store\Model\TaxProvider|null
     */
    public function getTaxProvider()
    {
        return $this->container['tax_provider'];
    }

    /**
     * Sets tax_provider
     *
     * @param \MedusaWP\MedusaClient\Store\Model\TaxProvider|null $tax_provider tax_provider
     *
     * @return self
     */
    public function setTaxProvider($tax_provider)
    {
        if (is_null($tax_provider)) {
            throw new \InvalidArgumentException('non-nullable tax_provider cannot be null');
        }
        $this->container['tax_provider'] = $tax_provider;

        return $this;
    }

    /**
     * Gets payment_providers
     *
     * @return \MedusaWP\MedusaClient\Store\Model\PaymentProvider[]|null
     */
    public function getPaymentProviders()
    {
        return $this->container['payment_providers'];
    }

    /**
     * Sets payment_providers
     *
     * @param \MedusaWP\MedusaClient\Store\Model\PaymentProvider[]|null $payment_providers The details of the payment providers that can be used to process payments in the region.
     *
     * @return self
     */
    public function setPaymentProviders($payment_providers)
    {
        if (is_null($payment_providers)) {
            throw new \InvalidArgumentException('non-nullable payment_providers cannot be null');
        }
        $this->container['payment_providers'] = $payment_providers;

        return $this;
    }

    /**
     * Gets fulfillment_providers
     *
     * @return \MedusaWP\MedusaClient\Store\Model\FulfillmentProvider[]|null
     */
    public function getFulfillmentProviders()
    {
        return $this->container['fulfillment_providers'];
    }

    /**
     * Sets fulfillment_providers
     *
     * @param \MedusaWP\MedusaClient\Store\Model\FulfillmentProvider[]|null $fulfillment_providers The details of the fulfillment providers that can be used to fulfill items of orders and similar resources in the region.
     *
     * @return self
     */
    public function setFulfillmentProviders($fulfillment_providers)
    {
        if (is_null($fulfillment_providers)) {
            throw new \InvalidArgumentException('non-nullable fulfillment_providers cannot be null');
        }
        $this->container['fulfillment_providers'] = $fulfillment_providers;

        return $this;
    }

    /**
     * Gets includes_tax
     *
     * @return bool|null
     */
    public function getIncludesTax()
    {
        return $this->container['includes_tax'];
    }

    /**
     * Sets includes_tax
     *
     * @param bool|null $includes_tax Whether the prices for the region include tax
     *
     * @return self
     */
    public function setIncludesTax($includes_tax)
    {
        if (is_null($includes_tax)) {
            throw new \InvalidArgumentException('non-nullable includes_tax cannot be null');
        }
        $this->container['includes_tax'] = $includes_tax;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at The date with timezone at which the resource was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at The date with timezone at which the resource was updated.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets deleted_at
     *
     * @return \DateTime
     */
    public function getDeletedAt()
    {
        return $this->container['deleted_at'];
    }

    /**
     * Sets deleted_at
     *
     * @param \DateTime $deleted_at The date with timezone at which the resource was deleted.
     *
     * @return self
     */
    public function setDeletedAt($deleted_at)
    {
        if (is_null($deleted_at)) {
            array_push($this->openAPINullablesSetToNull, 'deleted_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deleted_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deleted_at'] = $deleted_at;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object $metadata An optional key-value map with additional details
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            array_push($this->openAPINullablesSetToNull, 'metadata');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metadata', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


