<?php
/**
 * Order
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MedusaWP\MedusaClient\Store
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Medusa Storefront API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MedusaWP\MedusaClient\Store\Model;

use \ArrayAccess;
use \MedusaWP\MedusaClient\Store\ObjectSerializer;

/**
 * Order Class Doc Comment
 *
 * @category Class
 * @description An order is a purchase made by a customer. It holds details about payment and fulfillment of the order. An order may also be created from a draft order, which is created by an admin user.
 * @package  MedusaWP\MedusaClient\Store
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Order implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'status' => 'string',
        'fulfillment_status' => 'string',
        'payment_status' => 'string',
        'display_id' => 'int',
        'cart_id' => 'string',
        'cart' => '\MedusaWP\MedusaClient\Store\Model\Cart',
        'customer_id' => 'string',
        'customer' => '\MedusaWP\MedusaClient\Store\Model\Customer',
        'email' => 'string',
        'billing_address_id' => 'string',
        'billing_address' => '\MedusaWP\MedusaClient\Store\Model\Address',
        'shipping_address_id' => 'string',
        'shipping_address' => '\MedusaWP\MedusaClient\Store\Model\Address',
        'region_id' => 'string',
        'region' => '\MedusaWP\MedusaClient\Store\Model\Region',
        'currency_code' => 'string',
        'currency' => '\MedusaWP\MedusaClient\Store\Model\Currency',
        'tax_rate' => 'float',
        'discounts' => '\MedusaWP\MedusaClient\Store\Model\Discount[]',
        'gift_cards' => '\MedusaWP\MedusaClient\Store\Model\GiftCard[]',
        'shipping_methods' => '\MedusaWP\MedusaClient\Store\Model\ShippingMethod[]',
        'payments' => '\MedusaWP\MedusaClient\Store\Model\Payment[]',
        'fulfillments' => '\MedusaWP\MedusaClient\Store\Model\Fulfillment[]',
        'returns' => '\MedusaWP\MedusaClient\Store\Model\ModelReturn[]',
        'claims' => '\MedusaWP\MedusaClient\Store\Model\ClaimOrder[]',
        'refunds' => '\MedusaWP\MedusaClient\Store\Model\Refund[]',
        'swaps' => '\MedusaWP\MedusaClient\Store\Model\Swap[]',
        'draft_order_id' => 'string',
        'draft_order' => '\MedusaWP\MedusaClient\Store\Model\DraftOrder',
        'items' => '\MedusaWP\MedusaClient\Store\Model\LineItem[]',
        'edits' => '\MedusaWP\MedusaClient\Store\Model\OrderEdit[]',
        'gift_card_transactions' => '\MedusaWP\MedusaClient\Store\Model\GiftCardTransaction[]',
        'canceled_at' => '\DateTime',
        'no_notification' => 'bool',
        'idempotency_key' => 'string',
        'external_id' => 'string',
        'sales_channel_id' => 'string',
        'sales_channel' => '\MedusaWP\MedusaClient\Store\Model\SalesChannel',
        'shipping_total' => 'int',
        'raw_discount_total' => 'int',
        'discount_total' => 'int',
        'tax_total' => 'int',
        'refunded_total' => 'int',
        'total' => 'int',
        'subtotal' => 'int',
        'paid_total' => 'int',
        'refundable_amount' => 'int',
        'gift_card_total' => 'int',
        'gift_card_tax_total' => 'int',
        'returnable_items' => '\MedusaWP\MedusaClient\Store\Model\LineItem[]',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'status' => null,
        'fulfillment_status' => null,
        'payment_status' => null,
        'display_id' => null,
        'cart_id' => null,
        'cart' => null,
        'customer_id' => null,
        'customer' => null,
        'email' => 'email',
        'billing_address_id' => null,
        'billing_address' => null,
        'shipping_address_id' => null,
        'shipping_address' => null,
        'region_id' => null,
        'region' => null,
        'currency_code' => null,
        'currency' => null,
        'tax_rate' => null,
        'discounts' => null,
        'gift_cards' => null,
        'shipping_methods' => null,
        'payments' => null,
        'fulfillments' => null,
        'returns' => null,
        'claims' => null,
        'refunds' => null,
        'swaps' => null,
        'draft_order_id' => null,
        'draft_order' => null,
        'items' => null,
        'edits' => null,
        'gift_card_transactions' => null,
        'canceled_at' => 'date-time',
        'no_notification' => null,
        'idempotency_key' => null,
        'external_id' => null,
        'sales_channel_id' => null,
        'sales_channel' => null,
        'shipping_total' => null,
        'raw_discount_total' => null,
        'discount_total' => null,
        'tax_total' => null,
        'refunded_total' => null,
        'total' => null,
        'subtotal' => null,
        'paid_total' => null,
        'refundable_amount' => null,
        'gift_card_total' => null,
        'gift_card_tax_total' => null,
        'returnable_items' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'metadata' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'status' => false,
		'fulfillment_status' => false,
		'payment_status' => false,
		'display_id' => false,
		'cart_id' => true,
		'cart' => false,
		'customer_id' => false,
		'customer' => false,
		'email' => false,
		'billing_address_id' => true,
		'billing_address' => false,
		'shipping_address_id' => true,
		'shipping_address' => false,
		'region_id' => false,
		'region' => false,
		'currency_code' => false,
		'currency' => false,
		'tax_rate' => true,
		'discounts' => false,
		'gift_cards' => false,
		'shipping_methods' => false,
		'payments' => false,
		'fulfillments' => false,
		'returns' => false,
		'claims' => false,
		'refunds' => false,
		'swaps' => false,
		'draft_order_id' => true,
		'draft_order' => false,
		'items' => false,
		'edits' => false,
		'gift_card_transactions' => false,
		'canceled_at' => true,
		'no_notification' => true,
		'idempotency_key' => true,
		'external_id' => true,
		'sales_channel_id' => true,
		'sales_channel' => false,
		'shipping_total' => false,
		'raw_discount_total' => false,
		'discount_total' => false,
		'tax_total' => false,
		'refunded_total' => false,
		'total' => false,
		'subtotal' => false,
		'paid_total' => false,
		'refundable_amount' => false,
		'gift_card_total' => false,
		'gift_card_tax_total' => false,
		'returnable_items' => false,
		'created_at' => false,
		'updated_at' => false,
		'metadata' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'status' => 'status',
        'fulfillment_status' => 'fulfillment_status',
        'payment_status' => 'payment_status',
        'display_id' => 'display_id',
        'cart_id' => 'cart_id',
        'cart' => 'cart',
        'customer_id' => 'customer_id',
        'customer' => 'customer',
        'email' => 'email',
        'billing_address_id' => 'billing_address_id',
        'billing_address' => 'billing_address',
        'shipping_address_id' => 'shipping_address_id',
        'shipping_address' => 'shipping_address',
        'region_id' => 'region_id',
        'region' => 'region',
        'currency_code' => 'currency_code',
        'currency' => 'currency',
        'tax_rate' => 'tax_rate',
        'discounts' => 'discounts',
        'gift_cards' => 'gift_cards',
        'shipping_methods' => 'shipping_methods',
        'payments' => 'payments',
        'fulfillments' => 'fulfillments',
        'returns' => 'returns',
        'claims' => 'claims',
        'refunds' => 'refunds',
        'swaps' => 'swaps',
        'draft_order_id' => 'draft_order_id',
        'draft_order' => 'draft_order',
        'items' => 'items',
        'edits' => 'edits',
        'gift_card_transactions' => 'gift_card_transactions',
        'canceled_at' => 'canceled_at',
        'no_notification' => 'no_notification',
        'idempotency_key' => 'idempotency_key',
        'external_id' => 'external_id',
        'sales_channel_id' => 'sales_channel_id',
        'sales_channel' => 'sales_channel',
        'shipping_total' => 'shipping_total',
        'raw_discount_total' => 'raw_discount_total',
        'discount_total' => 'discount_total',
        'tax_total' => 'tax_total',
        'refunded_total' => 'refunded_total',
        'total' => 'total',
        'subtotal' => 'subtotal',
        'paid_total' => 'paid_total',
        'refundable_amount' => 'refundable_amount',
        'gift_card_total' => 'gift_card_total',
        'gift_card_tax_total' => 'gift_card_tax_total',
        'returnable_items' => 'returnable_items',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'status' => 'setStatus',
        'fulfillment_status' => 'setFulfillmentStatus',
        'payment_status' => 'setPaymentStatus',
        'display_id' => 'setDisplayId',
        'cart_id' => 'setCartId',
        'cart' => 'setCart',
        'customer_id' => 'setCustomerId',
        'customer' => 'setCustomer',
        'email' => 'setEmail',
        'billing_address_id' => 'setBillingAddressId',
        'billing_address' => 'setBillingAddress',
        'shipping_address_id' => 'setShippingAddressId',
        'shipping_address' => 'setShippingAddress',
        'region_id' => 'setRegionId',
        'region' => 'setRegion',
        'currency_code' => 'setCurrencyCode',
        'currency' => 'setCurrency',
        'tax_rate' => 'setTaxRate',
        'discounts' => 'setDiscounts',
        'gift_cards' => 'setGiftCards',
        'shipping_methods' => 'setShippingMethods',
        'payments' => 'setPayments',
        'fulfillments' => 'setFulfillments',
        'returns' => 'setReturns',
        'claims' => 'setClaims',
        'refunds' => 'setRefunds',
        'swaps' => 'setSwaps',
        'draft_order_id' => 'setDraftOrderId',
        'draft_order' => 'setDraftOrder',
        'items' => 'setItems',
        'edits' => 'setEdits',
        'gift_card_transactions' => 'setGiftCardTransactions',
        'canceled_at' => 'setCanceledAt',
        'no_notification' => 'setNoNotification',
        'idempotency_key' => 'setIdempotencyKey',
        'external_id' => 'setExternalId',
        'sales_channel_id' => 'setSalesChannelId',
        'sales_channel' => 'setSalesChannel',
        'shipping_total' => 'setShippingTotal',
        'raw_discount_total' => 'setRawDiscountTotal',
        'discount_total' => 'setDiscountTotal',
        'tax_total' => 'setTaxTotal',
        'refunded_total' => 'setRefundedTotal',
        'total' => 'setTotal',
        'subtotal' => 'setSubtotal',
        'paid_total' => 'setPaidTotal',
        'refundable_amount' => 'setRefundableAmount',
        'gift_card_total' => 'setGiftCardTotal',
        'gift_card_tax_total' => 'setGiftCardTaxTotal',
        'returnable_items' => 'setReturnableItems',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'status' => 'getStatus',
        'fulfillment_status' => 'getFulfillmentStatus',
        'payment_status' => 'getPaymentStatus',
        'display_id' => 'getDisplayId',
        'cart_id' => 'getCartId',
        'cart' => 'getCart',
        'customer_id' => 'getCustomerId',
        'customer' => 'getCustomer',
        'email' => 'getEmail',
        'billing_address_id' => 'getBillingAddressId',
        'billing_address' => 'getBillingAddress',
        'shipping_address_id' => 'getShippingAddressId',
        'shipping_address' => 'getShippingAddress',
        'region_id' => 'getRegionId',
        'region' => 'getRegion',
        'currency_code' => 'getCurrencyCode',
        'currency' => 'getCurrency',
        'tax_rate' => 'getTaxRate',
        'discounts' => 'getDiscounts',
        'gift_cards' => 'getGiftCards',
        'shipping_methods' => 'getShippingMethods',
        'payments' => 'getPayments',
        'fulfillments' => 'getFulfillments',
        'returns' => 'getReturns',
        'claims' => 'getClaims',
        'refunds' => 'getRefunds',
        'swaps' => 'getSwaps',
        'draft_order_id' => 'getDraftOrderId',
        'draft_order' => 'getDraftOrder',
        'items' => 'getItems',
        'edits' => 'getEdits',
        'gift_card_transactions' => 'getGiftCardTransactions',
        'canceled_at' => 'getCanceledAt',
        'no_notification' => 'getNoNotification',
        'idempotency_key' => 'getIdempotencyKey',
        'external_id' => 'getExternalId',
        'sales_channel_id' => 'getSalesChannelId',
        'sales_channel' => 'getSalesChannel',
        'shipping_total' => 'getShippingTotal',
        'raw_discount_total' => 'getRawDiscountTotal',
        'discount_total' => 'getDiscountTotal',
        'tax_total' => 'getTaxTotal',
        'refunded_total' => 'getRefundedTotal',
        'total' => 'getTotal',
        'subtotal' => 'getSubtotal',
        'paid_total' => 'getPaidTotal',
        'refundable_amount' => 'getRefundableAmount',
        'gift_card_total' => 'getGiftCardTotal',
        'gift_card_tax_total' => 'getGiftCardTaxTotal',
        'returnable_items' => 'getReturnableItems',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_PENDING = 'pending';
    public const STATUS_COMPLETED = 'completed';
    public const STATUS_ARCHIVED = 'archived';
    public const STATUS_CANCELED = 'canceled';
    public const STATUS_REQUIRES_ACTION = 'requires_action';
    public const FULFILLMENT_STATUS_NOT_FULFILLED = 'not_fulfilled';
    public const FULFILLMENT_STATUS_PARTIALLY_FULFILLED = 'partially_fulfilled';
    public const FULFILLMENT_STATUS_FULFILLED = 'fulfilled';
    public const FULFILLMENT_STATUS_PARTIALLY_SHIPPED = 'partially_shipped';
    public const FULFILLMENT_STATUS_SHIPPED = 'shipped';
    public const FULFILLMENT_STATUS_PARTIALLY_RETURNED = 'partially_returned';
    public const FULFILLMENT_STATUS_RETURNED = 'returned';
    public const FULFILLMENT_STATUS_CANCELED = 'canceled';
    public const FULFILLMENT_STATUS_REQUIRES_ACTION = 'requires_action';
    public const PAYMENT_STATUS_NOT_PAID = 'not_paid';
    public const PAYMENT_STATUS_AWAITING = 'awaiting';
    public const PAYMENT_STATUS_CAPTURED = 'captured';
    public const PAYMENT_STATUS_PARTIALLY_REFUNDED = 'partially_refunded';
    public const PAYMENT_STATUS_REFUNDED = 'refunded';
    public const PAYMENT_STATUS_CANCELED = 'canceled';
    public const PAYMENT_STATUS_REQUIRES_ACTION = 'requires_action';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_PENDING,
            self::STATUS_COMPLETED,
            self::STATUS_ARCHIVED,
            self::STATUS_CANCELED,
            self::STATUS_REQUIRES_ACTION,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFulfillmentStatusAllowableValues()
    {
        return [
            self::FULFILLMENT_STATUS_NOT_FULFILLED,
            self::FULFILLMENT_STATUS_PARTIALLY_FULFILLED,
            self::FULFILLMENT_STATUS_FULFILLED,
            self::FULFILLMENT_STATUS_PARTIALLY_SHIPPED,
            self::FULFILLMENT_STATUS_SHIPPED,
            self::FULFILLMENT_STATUS_PARTIALLY_RETURNED,
            self::FULFILLMENT_STATUS_RETURNED,
            self::FULFILLMENT_STATUS_CANCELED,
            self::FULFILLMENT_STATUS_REQUIRES_ACTION,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentStatusAllowableValues()
    {
        return [
            self::PAYMENT_STATUS_NOT_PAID,
            self::PAYMENT_STATUS_AWAITING,
            self::PAYMENT_STATUS_CAPTURED,
            self::PAYMENT_STATUS_PARTIALLY_REFUNDED,
            self::PAYMENT_STATUS_REFUNDED,
            self::PAYMENT_STATUS_CANCELED,
            self::PAYMENT_STATUS_REQUIRES_ACTION,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], 'pending');
        $this->setIfExists('fulfillment_status', $data ?? [], 'not_fulfilled');
        $this->setIfExists('payment_status', $data ?? [], 'not_paid');
        $this->setIfExists('display_id', $data ?? [], null);
        $this->setIfExists('cart_id', $data ?? [], null);
        $this->setIfExists('cart', $data ?? [], null);
        $this->setIfExists('customer_id', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('billing_address_id', $data ?? [], null);
        $this->setIfExists('billing_address', $data ?? [], null);
        $this->setIfExists('shipping_address_id', $data ?? [], null);
        $this->setIfExists('shipping_address', $data ?? [], null);
        $this->setIfExists('region_id', $data ?? [], null);
        $this->setIfExists('region', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('tax_rate', $data ?? [], null);
        $this->setIfExists('discounts', $data ?? [], null);
        $this->setIfExists('gift_cards', $data ?? [], null);
        $this->setIfExists('shipping_methods', $data ?? [], null);
        $this->setIfExists('payments', $data ?? [], null);
        $this->setIfExists('fulfillments', $data ?? [], null);
        $this->setIfExists('returns', $data ?? [], null);
        $this->setIfExists('claims', $data ?? [], null);
        $this->setIfExists('refunds', $data ?? [], null);
        $this->setIfExists('swaps', $data ?? [], null);
        $this->setIfExists('draft_order_id', $data ?? [], null);
        $this->setIfExists('draft_order', $data ?? [], null);
        $this->setIfExists('items', $data ?? [], null);
        $this->setIfExists('edits', $data ?? [], null);
        $this->setIfExists('gift_card_transactions', $data ?? [], null);
        $this->setIfExists('canceled_at', $data ?? [], null);
        $this->setIfExists('no_notification', $data ?? [], null);
        $this->setIfExists('idempotency_key', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('sales_channel_id', $data ?? [], null);
        $this->setIfExists('sales_channel', $data ?? [], null);
        $this->setIfExists('shipping_total', $data ?? [], null);
        $this->setIfExists('raw_discount_total', $data ?? [], null);
        $this->setIfExists('discount_total', $data ?? [], null);
        $this->setIfExists('tax_total', $data ?? [], null);
        $this->setIfExists('refunded_total', $data ?? [], null);
        $this->setIfExists('total', $data ?? [], null);
        $this->setIfExists('subtotal', $data ?? [], null);
        $this->setIfExists('paid_total', $data ?? [], null);
        $this->setIfExists('refundable_amount', $data ?? [], null);
        $this->setIfExists('gift_card_total', $data ?? [], null);
        $this->setIfExists('gift_card_tax_total', $data ?? [], null);
        $this->setIfExists('returnable_items', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['fulfillment_status'] === null) {
            $invalidProperties[] = "'fulfillment_status' can't be null";
        }
        $allowedValues = $this->getFulfillmentStatusAllowableValues();
        if (!is_null($this->container['fulfillment_status']) && !in_array($this->container['fulfillment_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fulfillment_status', must be one of '%s'",
                $this->container['fulfillment_status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['payment_status'] === null) {
            $invalidProperties[] = "'payment_status' can't be null";
        }
        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!is_null($this->container['payment_status']) && !in_array($this->container['payment_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_status', must be one of '%s'",
                $this->container['payment_status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['display_id'] === null) {
            $invalidProperties[] = "'display_id' can't be null";
        }
        if ($this->container['cart_id'] === null) {
            $invalidProperties[] = "'cart_id' can't be null";
        }
        if ($this->container['customer_id'] === null) {
            $invalidProperties[] = "'customer_id' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['billing_address_id'] === null) {
            $invalidProperties[] = "'billing_address_id' can't be null";
        }
        if ($this->container['shipping_address_id'] === null) {
            $invalidProperties[] = "'shipping_address_id' can't be null";
        }
        if ($this->container['region_id'] === null) {
            $invalidProperties[] = "'region_id' can't be null";
        }
        if ($this->container['currency_code'] === null) {
            $invalidProperties[] = "'currency_code' can't be null";
        }
        if ($this->container['tax_rate'] === null) {
            $invalidProperties[] = "'tax_rate' can't be null";
        }
        if ($this->container['draft_order_id'] === null) {
            $invalidProperties[] = "'draft_order_id' can't be null";
        }
        if ($this->container['canceled_at'] === null) {
            $invalidProperties[] = "'canceled_at' can't be null";
        }
        if ($this->container['no_notification'] === null) {
            $invalidProperties[] = "'no_notification' can't be null";
        }
        if ($this->container['idempotency_key'] === null) {
            $invalidProperties[] = "'idempotency_key' can't be null";
        }
        if ($this->container['external_id'] === null) {
            $invalidProperties[] = "'external_id' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['metadata'] === null) {
            $invalidProperties[] = "'metadata' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The order's ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The order's status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets fulfillment_status
     *
     * @return string
     */
    public function getFulfillmentStatus()
    {
        return $this->container['fulfillment_status'];
    }

    /**
     * Sets fulfillment_status
     *
     * @param string $fulfillment_status The order's fulfillment status
     *
     * @return self
     */
    public function setFulfillmentStatus($fulfillment_status)
    {
        if (is_null($fulfillment_status)) {
            throw new \InvalidArgumentException('non-nullable fulfillment_status cannot be null');
        }
        $allowedValues = $this->getFulfillmentStatusAllowableValues();
        if (!in_array($fulfillment_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fulfillment_status', must be one of '%s'",
                    $fulfillment_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fulfillment_status'] = $fulfillment_status;

        return $this;
    }

    /**
     * Gets payment_status
     *
     * @return string
     */
    public function getPaymentStatus()
    {
        return $this->container['payment_status'];
    }

    /**
     * Sets payment_status
     *
     * @param string $payment_status The order's payment status
     *
     * @return self
     */
    public function setPaymentStatus($payment_status)
    {
        if (is_null($payment_status)) {
            throw new \InvalidArgumentException('non-nullable payment_status cannot be null');
        }
        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!in_array($payment_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_status', must be one of '%s'",
                    $payment_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_status'] = $payment_status;

        return $this;
    }

    /**
     * Gets display_id
     *
     * @return int
     */
    public function getDisplayId()
    {
        return $this->container['display_id'];
    }

    /**
     * Sets display_id
     *
     * @param int $display_id The order's display ID
     *
     * @return self
     */
    public function setDisplayId($display_id)
    {
        if (is_null($display_id)) {
            throw new \InvalidArgumentException('non-nullable display_id cannot be null');
        }
        $this->container['display_id'] = $display_id;

        return $this;
    }

    /**
     * Gets cart_id
     *
     * @return string
     */
    public function getCartId()
    {
        return $this->container['cart_id'];
    }

    /**
     * Sets cart_id
     *
     * @param string $cart_id The ID of the cart associated with the order
     *
     * @return self
     */
    public function setCartId($cart_id)
    {
        if (is_null($cart_id)) {
            array_push($this->openAPINullablesSetToNull, 'cart_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cart_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cart_id'] = $cart_id;

        return $this;
    }

    /**
     * Gets cart
     *
     * @return \MedusaWP\MedusaClient\Store\Model\Cart|null
     */
    public function getCart()
    {
        return $this->container['cart'];
    }

    /**
     * Sets cart
     *
     * @param \MedusaWP\MedusaClient\Store\Model\Cart|null $cart cart
     *
     * @return self
     */
    public function setCart($cart)
    {
        if (is_null($cart)) {
            throw new \InvalidArgumentException('non-nullable cart cannot be null');
        }
        $this->container['cart'] = $cart;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string $customer_id The ID of the customer associated with the order
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        if (is_null($customer_id)) {
            throw new \InvalidArgumentException('non-nullable customer_id cannot be null');
        }
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \MedusaWP\MedusaClient\Store\Model\Customer|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \MedusaWP\MedusaClient\Store\Model\Customer|null $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email The email associated with the order
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets billing_address_id
     *
     * @return string
     */
    public function getBillingAddressId()
    {
        return $this->container['billing_address_id'];
    }

    /**
     * Sets billing_address_id
     *
     * @param string $billing_address_id The ID of the billing address associated with the order
     *
     * @return self
     */
    public function setBillingAddressId($billing_address_id)
    {
        if (is_null($billing_address_id)) {
            array_push($this->openAPINullablesSetToNull, 'billing_address_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_address_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billing_address_id'] = $billing_address_id;

        return $this;
    }

    /**
     * Gets billing_address
     *
     * @return \MedusaWP\MedusaClient\Store\Model\Address|null
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     *
     * @param \MedusaWP\MedusaClient\Store\Model\Address|null $billing_address billing_address
     *
     * @return self
     */
    public function setBillingAddress($billing_address)
    {
        if (is_null($billing_address)) {
            throw new \InvalidArgumentException('non-nullable billing_address cannot be null');
        }
        $this->container['billing_address'] = $billing_address;

        return $this;
    }

    /**
     * Gets shipping_address_id
     *
     * @return string
     */
    public function getShippingAddressId()
    {
        return $this->container['shipping_address_id'];
    }

    /**
     * Sets shipping_address_id
     *
     * @param string $shipping_address_id The ID of the shipping address associated with the order
     *
     * @return self
     */
    public function setShippingAddressId($shipping_address_id)
    {
        if (is_null($shipping_address_id)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_address_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_address_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shipping_address_id'] = $shipping_address_id;

        return $this;
    }

    /**
     * Gets shipping_address
     *
     * @return \MedusaWP\MedusaClient\Store\Model\Address|null
     */
    public function getShippingAddress()
    {
        return $this->container['shipping_address'];
    }

    /**
     * Sets shipping_address
     *
     * @param \MedusaWP\MedusaClient\Store\Model\Address|null $shipping_address shipping_address
     *
     * @return self
     */
    public function setShippingAddress($shipping_address)
    {
        if (is_null($shipping_address)) {
            throw new \InvalidArgumentException('non-nullable shipping_address cannot be null');
        }
        $this->container['shipping_address'] = $shipping_address;

        return $this;
    }

    /**
     * Gets region_id
     *
     * @return string
     */
    public function getRegionId()
    {
        return $this->container['region_id'];
    }

    /**
     * Sets region_id
     *
     * @param string $region_id The ID of the region this order was created in.
     *
     * @return self
     */
    public function setRegionId($region_id)
    {
        if (is_null($region_id)) {
            throw new \InvalidArgumentException('non-nullable region_id cannot be null');
        }
        $this->container['region_id'] = $region_id;

        return $this;
    }

    /**
     * Gets region
     *
     * @return \MedusaWP\MedusaClient\Store\Model\Region|null
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param \MedusaWP\MedusaClient\Store\Model\Region|null $region region
     *
     * @return self
     */
    public function setRegion($region)
    {
        if (is_null($region)) {
            throw new \InvalidArgumentException('non-nullable region cannot be null');
        }
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code The 3 character currency code that is used in the order
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (is_null($currency_code)) {
            throw new \InvalidArgumentException('non-nullable currency_code cannot be null');
        }
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \MedusaWP\MedusaClient\Store\Model\Currency|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \MedusaWP\MedusaClient\Store\Model\Currency|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets tax_rate
     *
     * @return float
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     *
     * @param float $tax_rate The order's tax rate
     *
     * @return self
     */
    public function setTaxRate($tax_rate)
    {
        if (is_null($tax_rate)) {
            array_push($this->openAPINullablesSetToNull, 'tax_rate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_rate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }

    /**
     * Gets discounts
     *
     * @return \MedusaWP\MedusaClient\Store\Model\Discount[]|null
     */
    public function getDiscounts()
    {
        return $this->container['discounts'];
    }

    /**
     * Sets discounts
     *
     * @param \MedusaWP\MedusaClient\Store\Model\Discount[]|null $discounts The details of the discounts applied on the order.
     *
     * @return self
     */
    public function setDiscounts($discounts)
    {
        if (is_null($discounts)) {
            throw new \InvalidArgumentException('non-nullable discounts cannot be null');
        }
        $this->container['discounts'] = $discounts;

        return $this;
    }

    /**
     * Gets gift_cards
     *
     * @return \MedusaWP\MedusaClient\Store\Model\GiftCard[]|null
     */
    public function getGiftCards()
    {
        return $this->container['gift_cards'];
    }

    /**
     * Sets gift_cards
     *
     * @param \MedusaWP\MedusaClient\Store\Model\GiftCard[]|null $gift_cards The details of the gift card used in the order.
     *
     * @return self
     */
    public function setGiftCards($gift_cards)
    {
        if (is_null($gift_cards)) {
            throw new \InvalidArgumentException('non-nullable gift_cards cannot be null');
        }
        $this->container['gift_cards'] = $gift_cards;

        return $this;
    }

    /**
     * Gets shipping_methods
     *
     * @return \MedusaWP\MedusaClient\Store\Model\ShippingMethod[]|null
     */
    public function getShippingMethods()
    {
        return $this->container['shipping_methods'];
    }

    /**
     * Sets shipping_methods
     *
     * @param \MedusaWP\MedusaClient\Store\Model\ShippingMethod[]|null $shipping_methods The details of the shipping methods used in the order.
     *
     * @return self
     */
    public function setShippingMethods($shipping_methods)
    {
        if (is_null($shipping_methods)) {
            throw new \InvalidArgumentException('non-nullable shipping_methods cannot be null');
        }
        $this->container['shipping_methods'] = $shipping_methods;

        return $this;
    }

    /**
     * Gets payments
     *
     * @return \MedusaWP\MedusaClient\Store\Model\Payment[]|null
     */
    public function getPayments()
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     *
     * @param \MedusaWP\MedusaClient\Store\Model\Payment[]|null $payments The details of the payments used in the order.
     *
     * @return self
     */
    public function setPayments($payments)
    {
        if (is_null($payments)) {
            throw new \InvalidArgumentException('non-nullable payments cannot be null');
        }
        $this->container['payments'] = $payments;

        return $this;
    }

    /**
     * Gets fulfillments
     *
     * @return \MedusaWP\MedusaClient\Store\Model\Fulfillment[]|null
     */
    public function getFulfillments()
    {
        return $this->container['fulfillments'];
    }

    /**
     * Sets fulfillments
     *
     * @param \MedusaWP\MedusaClient\Store\Model\Fulfillment[]|null $fulfillments The details of the fulfillments created for the order.
     *
     * @return self
     */
    public function setFulfillments($fulfillments)
    {
        if (is_null($fulfillments)) {
            throw new \InvalidArgumentException('non-nullable fulfillments cannot be null');
        }
        $this->container['fulfillments'] = $fulfillments;

        return $this;
    }

    /**
     * Gets returns
     *
     * @return \MedusaWP\MedusaClient\Store\Model\ModelReturn[]|null
     */
    public function getReturns()
    {
        return $this->container['returns'];
    }

    /**
     * Sets returns
     *
     * @param \MedusaWP\MedusaClient\Store\Model\ModelReturn[]|null $returns The details of the returns created for the order.
     *
     * @return self
     */
    public function setReturns($returns)
    {
        if (is_null($returns)) {
            throw new \InvalidArgumentException('non-nullable returns cannot be null');
        }
        $this->container['returns'] = $returns;

        return $this;
    }

    /**
     * Gets claims
     *
     * @return \MedusaWP\MedusaClient\Store\Model\ClaimOrder[]|null
     */
    public function getClaims()
    {
        return $this->container['claims'];
    }

    /**
     * Sets claims
     *
     * @param \MedusaWP\MedusaClient\Store\Model\ClaimOrder[]|null $claims The details of the claims created for the order.
     *
     * @return self
     */
    public function setClaims($claims)
    {
        if (is_null($claims)) {
            throw new \InvalidArgumentException('non-nullable claims cannot be null');
        }
        $this->container['claims'] = $claims;

        return $this;
    }

    /**
     * Gets refunds
     *
     * @return \MedusaWP\MedusaClient\Store\Model\Refund[]|null
     */
    public function getRefunds()
    {
        return $this->container['refunds'];
    }

    /**
     * Sets refunds
     *
     * @param \MedusaWP\MedusaClient\Store\Model\Refund[]|null $refunds The details of the refunds created for the order.
     *
     * @return self
     */
    public function setRefunds($refunds)
    {
        if (is_null($refunds)) {
            throw new \InvalidArgumentException('non-nullable refunds cannot be null');
        }
        $this->container['refunds'] = $refunds;

        return $this;
    }

    /**
     * Gets swaps
     *
     * @return \MedusaWP\MedusaClient\Store\Model\Swap[]|null
     */
    public function getSwaps()
    {
        return $this->container['swaps'];
    }

    /**
     * Sets swaps
     *
     * @param \MedusaWP\MedusaClient\Store\Model\Swap[]|null $swaps The details of the swaps created for the order.
     *
     * @return self
     */
    public function setSwaps($swaps)
    {
        if (is_null($swaps)) {
            throw new \InvalidArgumentException('non-nullable swaps cannot be null');
        }
        $this->container['swaps'] = $swaps;

        return $this;
    }

    /**
     * Gets draft_order_id
     *
     * @return string
     */
    public function getDraftOrderId()
    {
        return $this->container['draft_order_id'];
    }

    /**
     * Sets draft_order_id
     *
     * @param string $draft_order_id The ID of the draft order this order was created from.
     *
     * @return self
     */
    public function setDraftOrderId($draft_order_id)
    {
        if (is_null($draft_order_id)) {
            array_push($this->openAPINullablesSetToNull, 'draft_order_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('draft_order_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['draft_order_id'] = $draft_order_id;

        return $this;
    }

    /**
     * Gets draft_order
     *
     * @return \MedusaWP\MedusaClient\Store\Model\DraftOrder|null
     */
    public function getDraftOrder()
    {
        return $this->container['draft_order'];
    }

    /**
     * Sets draft_order
     *
     * @param \MedusaWP\MedusaClient\Store\Model\DraftOrder|null $draft_order draft_order
     *
     * @return self
     */
    public function setDraftOrder($draft_order)
    {
        if (is_null($draft_order)) {
            throw new \InvalidArgumentException('non-nullable draft_order cannot be null');
        }
        $this->container['draft_order'] = $draft_order;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \MedusaWP\MedusaClient\Store\Model\LineItem[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \MedusaWP\MedusaClient\Store\Model\LineItem[]|null $items The details of the line items that belong to the order.
     *
     * @return self
     */
    public function setItems($items)
    {
        if (is_null($items)) {
            throw new \InvalidArgumentException('non-nullable items cannot be null');
        }
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets edits
     *
     * @return \MedusaWP\MedusaClient\Store\Model\OrderEdit[]|null
     */
    public function getEdits()
    {
        return $this->container['edits'];
    }

    /**
     * Sets edits
     *
     * @param \MedusaWP\MedusaClient\Store\Model\OrderEdit[]|null $edits The details of the order edits done on the order.
     *
     * @return self
     */
    public function setEdits($edits)
    {
        if (is_null($edits)) {
            throw new \InvalidArgumentException('non-nullable edits cannot be null');
        }
        $this->container['edits'] = $edits;

        return $this;
    }

    /**
     * Gets gift_card_transactions
     *
     * @return \MedusaWP\MedusaClient\Store\Model\GiftCardTransaction[]|null
     */
    public function getGiftCardTransactions()
    {
        return $this->container['gift_card_transactions'];
    }

    /**
     * Sets gift_card_transactions
     *
     * @param \MedusaWP\MedusaClient\Store\Model\GiftCardTransaction[]|null $gift_card_transactions The gift card transactions made in the order.
     *
     * @return self
     */
    public function setGiftCardTransactions($gift_card_transactions)
    {
        if (is_null($gift_card_transactions)) {
            throw new \InvalidArgumentException('non-nullable gift_card_transactions cannot be null');
        }
        $this->container['gift_card_transactions'] = $gift_card_transactions;

        return $this;
    }

    /**
     * Gets canceled_at
     *
     * @return \DateTime
     */
    public function getCanceledAt()
    {
        return $this->container['canceled_at'];
    }

    /**
     * Sets canceled_at
     *
     * @param \DateTime $canceled_at The date the order was canceled on.
     *
     * @return self
     */
    public function setCanceledAt($canceled_at)
    {
        if (is_null($canceled_at)) {
            array_push($this->openAPINullablesSetToNull, 'canceled_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('canceled_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['canceled_at'] = $canceled_at;

        return $this;
    }

    /**
     * Gets no_notification
     *
     * @return bool
     */
    public function getNoNotification()
    {
        return $this->container['no_notification'];
    }

    /**
     * Sets no_notification
     *
     * @param bool $no_notification Flag for describing whether or not notifications related to this should be send.
     *
     * @return self
     */
    public function setNoNotification($no_notification)
    {
        if (is_null($no_notification)) {
            array_push($this->openAPINullablesSetToNull, 'no_notification');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('no_notification', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['no_notification'] = $no_notification;

        return $this;
    }

    /**
     * Gets idempotency_key
     *
     * @return string
     */
    public function getIdempotencyKey()
    {
        return $this->container['idempotency_key'];
    }

    /**
     * Sets idempotency_key
     *
     * @param string $idempotency_key Randomly generated key used to continue the processing of the order in case of failure.
     *
     * @return self
     */
    public function setIdempotencyKey($idempotency_key)
    {
        if (is_null($idempotency_key)) {
            array_push($this->openAPINullablesSetToNull, 'idempotency_key');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('idempotency_key', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['idempotency_key'] = $idempotency_key;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id The ID of an external order.
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            array_push($this->openAPINullablesSetToNull, 'external_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets sales_channel_id
     *
     * @return string|null
     */
    public function getSalesChannelId()
    {
        return $this->container['sales_channel_id'];
    }

    /**
     * Sets sales_channel_id
     *
     * @param string|null $sales_channel_id The ID of the sales channel this order belongs to.
     *
     * @return self
     */
    public function setSalesChannelId($sales_channel_id)
    {
        if (is_null($sales_channel_id)) {
            array_push($this->openAPINullablesSetToNull, 'sales_channel_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_channel_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sales_channel_id'] = $sales_channel_id;

        return $this;
    }

    /**
     * Gets sales_channel
     *
     * @return \MedusaWP\MedusaClient\Store\Model\SalesChannel|null
     */
    public function getSalesChannel()
    {
        return $this->container['sales_channel'];
    }

    /**
     * Sets sales_channel
     *
     * @param \MedusaWP\MedusaClient\Store\Model\SalesChannel|null $sales_channel sales_channel
     *
     * @return self
     */
    public function setSalesChannel($sales_channel)
    {
        if (is_null($sales_channel)) {
            throw new \InvalidArgumentException('non-nullable sales_channel cannot be null');
        }
        $this->container['sales_channel'] = $sales_channel;

        return $this;
    }

    /**
     * Gets shipping_total
     *
     * @return int|null
     */
    public function getShippingTotal()
    {
        return $this->container['shipping_total'];
    }

    /**
     * Sets shipping_total
     *
     * @param int|null $shipping_total The total of shipping
     *
     * @return self
     */
    public function setShippingTotal($shipping_total)
    {
        if (is_null($shipping_total)) {
            throw new \InvalidArgumentException('non-nullable shipping_total cannot be null');
        }
        $this->container['shipping_total'] = $shipping_total;

        return $this;
    }

    /**
     * Gets raw_discount_total
     *
     * @return int|null
     */
    public function getRawDiscountTotal()
    {
        return $this->container['raw_discount_total'];
    }

    /**
     * Sets raw_discount_total
     *
     * @param int|null $raw_discount_total The total of discount
     *
     * @return self
     */
    public function setRawDiscountTotal($raw_discount_total)
    {
        if (is_null($raw_discount_total)) {
            throw new \InvalidArgumentException('non-nullable raw_discount_total cannot be null');
        }
        $this->container['raw_discount_total'] = $raw_discount_total;

        return $this;
    }

    /**
     * Gets discount_total
     *
     * @return int|null
     */
    public function getDiscountTotal()
    {
        return $this->container['discount_total'];
    }

    /**
     * Sets discount_total
     *
     * @param int|null $discount_total The total of discount rounded
     *
     * @return self
     */
    public function setDiscountTotal($discount_total)
    {
        if (is_null($discount_total)) {
            throw new \InvalidArgumentException('non-nullable discount_total cannot be null');
        }
        $this->container['discount_total'] = $discount_total;

        return $this;
    }

    /**
     * Gets tax_total
     *
     * @return int|null
     */
    public function getTaxTotal()
    {
        return $this->container['tax_total'];
    }

    /**
     * Sets tax_total
     *
     * @param int|null $tax_total The total of tax
     *
     * @return self
     */
    public function setTaxTotal($tax_total)
    {
        if (is_null($tax_total)) {
            throw new \InvalidArgumentException('non-nullable tax_total cannot be null');
        }
        $this->container['tax_total'] = $tax_total;

        return $this;
    }

    /**
     * Gets refunded_total
     *
     * @return int|null
     */
    public function getRefundedTotal()
    {
        return $this->container['refunded_total'];
    }

    /**
     * Sets refunded_total
     *
     * @param int|null $refunded_total The total amount refunded if the order is returned.
     *
     * @return self
     */
    public function setRefundedTotal($refunded_total)
    {
        if (is_null($refunded_total)) {
            throw new \InvalidArgumentException('non-nullable refunded_total cannot be null');
        }
        $this->container['refunded_total'] = $refunded_total;

        return $this;
    }

    /**
     * Gets total
     *
     * @return int|null
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param int|null $total The total amount of the order
     *
     * @return self
     */
    public function setTotal($total)
    {
        if (is_null($total)) {
            throw new \InvalidArgumentException('non-nullable total cannot be null');
        }
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets subtotal
     *
     * @return int|null
     */
    public function getSubtotal()
    {
        return $this->container['subtotal'];
    }

    /**
     * Sets subtotal
     *
     * @param int|null $subtotal The subtotal of the order
     *
     * @return self
     */
    public function setSubtotal($subtotal)
    {
        if (is_null($subtotal)) {
            throw new \InvalidArgumentException('non-nullable subtotal cannot be null');
        }
        $this->container['subtotal'] = $subtotal;

        return $this;
    }

    /**
     * Gets paid_total
     *
     * @return int|null
     */
    public function getPaidTotal()
    {
        return $this->container['paid_total'];
    }

    /**
     * Sets paid_total
     *
     * @param int|null $paid_total The total amount paid
     *
     * @return self
     */
    public function setPaidTotal($paid_total)
    {
        if (is_null($paid_total)) {
            throw new \InvalidArgumentException('non-nullable paid_total cannot be null');
        }
        $this->container['paid_total'] = $paid_total;

        return $this;
    }

    /**
     * Gets refundable_amount
     *
     * @return int|null
     */
    public function getRefundableAmount()
    {
        return $this->container['refundable_amount'];
    }

    /**
     * Sets refundable_amount
     *
     * @param int|null $refundable_amount The amount that can be refunded
     *
     * @return self
     */
    public function setRefundableAmount($refundable_amount)
    {
        if (is_null($refundable_amount)) {
            throw new \InvalidArgumentException('non-nullable refundable_amount cannot be null');
        }
        $this->container['refundable_amount'] = $refundable_amount;

        return $this;
    }

    /**
     * Gets gift_card_total
     *
     * @return int|null
     */
    public function getGiftCardTotal()
    {
        return $this->container['gift_card_total'];
    }

    /**
     * Sets gift_card_total
     *
     * @param int|null $gift_card_total The total of gift cards
     *
     * @return self
     */
    public function setGiftCardTotal($gift_card_total)
    {
        if (is_null($gift_card_total)) {
            throw new \InvalidArgumentException('non-nullable gift_card_total cannot be null');
        }
        $this->container['gift_card_total'] = $gift_card_total;

        return $this;
    }

    /**
     * Gets gift_card_tax_total
     *
     * @return int|null
     */
    public function getGiftCardTaxTotal()
    {
        return $this->container['gift_card_tax_total'];
    }

    /**
     * Sets gift_card_tax_total
     *
     * @param int|null $gift_card_tax_total The total of gift cards with taxes
     *
     * @return self
     */
    public function setGiftCardTaxTotal($gift_card_tax_total)
    {
        if (is_null($gift_card_tax_total)) {
            throw new \InvalidArgumentException('non-nullable gift_card_tax_total cannot be null');
        }
        $this->container['gift_card_tax_total'] = $gift_card_tax_total;

        return $this;
    }

    /**
     * Gets returnable_items
     *
     * @return \MedusaWP\MedusaClient\Store\Model\LineItem[]|null
     */
    public function getReturnableItems()
    {
        return $this->container['returnable_items'];
    }

    /**
     * Sets returnable_items
     *
     * @param \MedusaWP\MedusaClient\Store\Model\LineItem[]|null $returnable_items The details of the line items that are returnable as part of the order, swaps, or claims
     *
     * @return self
     */
    public function setReturnableItems($returnable_items)
    {
        if (is_null($returnable_items)) {
            throw new \InvalidArgumentException('non-nullable returnable_items cannot be null');
        }
        $this->container['returnable_items'] = $returnable_items;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at The date with timezone at which the resource was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at The date with timezone at which the resource was updated.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object $metadata An optional key-value map with additional details
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            array_push($this->openAPINullablesSetToNull, 'metadata');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metadata', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


