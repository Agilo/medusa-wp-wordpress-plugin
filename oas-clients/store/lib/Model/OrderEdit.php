<?php
/**
 * OrderEdit
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MedusaWP\MedusaClient\Store
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Medusa Storefront API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MedusaWP\MedusaClient\Store\Model;

use \ArrayAccess;
use \MedusaWP\MedusaClient\Store\ObjectSerializer;

/**
 * OrderEdit Class Doc Comment
 *
 * @category Class
 * @description Order edit allows modifying items in an order, such as adding, updating, or deleting items from the original order. Once the order edit is confirmed, the changes are reflected on the original order.
 * @package  MedusaWP\MedusaClient\Store
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderEdit implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderEdit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'order_id' => 'string',
        'order' => '\MedusaWP\MedusaClient\Store\Model\Order',
        'changes' => '\MedusaWP\MedusaClient\Store\Model\OrderItemChange[]',
        'internal_note' => 'string',
        'created_by' => 'string',
        'requested_by' => 'string',
        'requested_at' => '\DateTime',
        'confirmed_by' => 'string',
        'confirmed_at' => '\DateTime',
        'declined_by' => 'string',
        'declined_at' => '\DateTime',
        'declined_reason' => 'string',
        'canceled_by' => 'string',
        'canceled_at' => '\DateTime',
        'subtotal' => 'int',
        'discount_total' => 'int',
        'shipping_total' => 'int',
        'gift_card_total' => 'int',
        'gift_card_tax_total' => 'int',
        'tax_total' => 'int',
        'total' => 'int',
        'difference_due' => 'int',
        'status' => 'string',
        'items' => '\MedusaWP\MedusaClient\Store\Model\LineItem[]',
        'payment_collection_id' => 'string',
        'payment_collection' => '\MedusaWP\MedusaClient\Store\Model\PaymentCollection',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'order_id' => null,
        'order' => null,
        'changes' => null,
        'internal_note' => null,
        'created_by' => null,
        'requested_by' => null,
        'requested_at' => 'date-time',
        'confirmed_by' => null,
        'confirmed_at' => 'date-time',
        'declined_by' => null,
        'declined_at' => 'date-time',
        'declined_reason' => null,
        'canceled_by' => null,
        'canceled_at' => 'date-time',
        'subtotal' => null,
        'discount_total' => null,
        'shipping_total' => null,
        'gift_card_total' => null,
        'gift_card_tax_total' => null,
        'tax_total' => null,
        'total' => null,
        'difference_due' => null,
        'status' => null,
        'items' => null,
        'payment_collection_id' => null,
        'payment_collection' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'order_id' => false,
		'order' => false,
		'changes' => false,
		'internal_note' => true,
		'created_by' => false,
		'requested_by' => true,
		'requested_at' => true,
		'confirmed_by' => true,
		'confirmed_at' => true,
		'declined_by' => true,
		'declined_at' => true,
		'declined_reason' => true,
		'canceled_by' => true,
		'canceled_at' => true,
		'subtotal' => false,
		'discount_total' => false,
		'shipping_total' => false,
		'gift_card_total' => false,
		'gift_card_tax_total' => false,
		'tax_total' => false,
		'total' => false,
		'difference_due' => false,
		'status' => false,
		'items' => false,
		'payment_collection_id' => true,
		'payment_collection' => false,
		'created_at' => false,
		'updated_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'order_id' => 'order_id',
        'order' => 'order',
        'changes' => 'changes',
        'internal_note' => 'internal_note',
        'created_by' => 'created_by',
        'requested_by' => 'requested_by',
        'requested_at' => 'requested_at',
        'confirmed_by' => 'confirmed_by',
        'confirmed_at' => 'confirmed_at',
        'declined_by' => 'declined_by',
        'declined_at' => 'declined_at',
        'declined_reason' => 'declined_reason',
        'canceled_by' => 'canceled_by',
        'canceled_at' => 'canceled_at',
        'subtotal' => 'subtotal',
        'discount_total' => 'discount_total',
        'shipping_total' => 'shipping_total',
        'gift_card_total' => 'gift_card_total',
        'gift_card_tax_total' => 'gift_card_tax_total',
        'tax_total' => 'tax_total',
        'total' => 'total',
        'difference_due' => 'difference_due',
        'status' => 'status',
        'items' => 'items',
        'payment_collection_id' => 'payment_collection_id',
        'payment_collection' => 'payment_collection',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'order_id' => 'setOrderId',
        'order' => 'setOrder',
        'changes' => 'setChanges',
        'internal_note' => 'setInternalNote',
        'created_by' => 'setCreatedBy',
        'requested_by' => 'setRequestedBy',
        'requested_at' => 'setRequestedAt',
        'confirmed_by' => 'setConfirmedBy',
        'confirmed_at' => 'setConfirmedAt',
        'declined_by' => 'setDeclinedBy',
        'declined_at' => 'setDeclinedAt',
        'declined_reason' => 'setDeclinedReason',
        'canceled_by' => 'setCanceledBy',
        'canceled_at' => 'setCanceledAt',
        'subtotal' => 'setSubtotal',
        'discount_total' => 'setDiscountTotal',
        'shipping_total' => 'setShippingTotal',
        'gift_card_total' => 'setGiftCardTotal',
        'gift_card_tax_total' => 'setGiftCardTaxTotal',
        'tax_total' => 'setTaxTotal',
        'total' => 'setTotal',
        'difference_due' => 'setDifferenceDue',
        'status' => 'setStatus',
        'items' => 'setItems',
        'payment_collection_id' => 'setPaymentCollectionId',
        'payment_collection' => 'setPaymentCollection',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'order_id' => 'getOrderId',
        'order' => 'getOrder',
        'changes' => 'getChanges',
        'internal_note' => 'getInternalNote',
        'created_by' => 'getCreatedBy',
        'requested_by' => 'getRequestedBy',
        'requested_at' => 'getRequestedAt',
        'confirmed_by' => 'getConfirmedBy',
        'confirmed_at' => 'getConfirmedAt',
        'declined_by' => 'getDeclinedBy',
        'declined_at' => 'getDeclinedAt',
        'declined_reason' => 'getDeclinedReason',
        'canceled_by' => 'getCanceledBy',
        'canceled_at' => 'getCanceledAt',
        'subtotal' => 'getSubtotal',
        'discount_total' => 'getDiscountTotal',
        'shipping_total' => 'getShippingTotal',
        'gift_card_total' => 'getGiftCardTotal',
        'gift_card_tax_total' => 'getGiftCardTaxTotal',
        'tax_total' => 'getTaxTotal',
        'total' => 'getTotal',
        'difference_due' => 'getDifferenceDue',
        'status' => 'getStatus',
        'items' => 'getItems',
        'payment_collection_id' => 'getPaymentCollectionId',
        'payment_collection' => 'getPaymentCollection',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_CONFIRMED = 'confirmed';
    public const STATUS_DECLINED = 'declined';
    public const STATUS_REQUESTED = 'requested';
    public const STATUS_CREATED = 'created';
    public const STATUS_CANCELED = 'canceled';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_CONFIRMED,
            self::STATUS_DECLINED,
            self::STATUS_REQUESTED,
            self::STATUS_CREATED,
            self::STATUS_CANCELED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('changes', $data ?? [], null);
        $this->setIfExists('internal_note', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('requested_by', $data ?? [], null);
        $this->setIfExists('requested_at', $data ?? [], null);
        $this->setIfExists('confirmed_by', $data ?? [], null);
        $this->setIfExists('confirmed_at', $data ?? [], null);
        $this->setIfExists('declined_by', $data ?? [], null);
        $this->setIfExists('declined_at', $data ?? [], null);
        $this->setIfExists('declined_reason', $data ?? [], null);
        $this->setIfExists('canceled_by', $data ?? [], null);
        $this->setIfExists('canceled_at', $data ?? [], null);
        $this->setIfExists('subtotal', $data ?? [], null);
        $this->setIfExists('discount_total', $data ?? [], null);
        $this->setIfExists('shipping_total', $data ?? [], null);
        $this->setIfExists('gift_card_total', $data ?? [], null);
        $this->setIfExists('gift_card_tax_total', $data ?? [], null);
        $this->setIfExists('tax_total', $data ?? [], null);
        $this->setIfExists('total', $data ?? [], null);
        $this->setIfExists('difference_due', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('items', $data ?? [], null);
        $this->setIfExists('payment_collection_id', $data ?? [], null);
        $this->setIfExists('payment_collection', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['order_id'] === null) {
            $invalidProperties[] = "'order_id' can't be null";
        }
        if ($this->container['internal_note'] === null) {
            $invalidProperties[] = "'internal_note' can't be null";
        }
        if ($this->container['created_by'] === null) {
            $invalidProperties[] = "'created_by' can't be null";
        }
        if ($this->container['requested_by'] === null) {
            $invalidProperties[] = "'requested_by' can't be null";
        }
        if ($this->container['requested_at'] === null) {
            $invalidProperties[] = "'requested_at' can't be null";
        }
        if ($this->container['confirmed_by'] === null) {
            $invalidProperties[] = "'confirmed_by' can't be null";
        }
        if ($this->container['confirmed_at'] === null) {
            $invalidProperties[] = "'confirmed_at' can't be null";
        }
        if ($this->container['declined_by'] === null) {
            $invalidProperties[] = "'declined_by' can't be null";
        }
        if ($this->container['declined_at'] === null) {
            $invalidProperties[] = "'declined_at' can't be null";
        }
        if ($this->container['declined_reason'] === null) {
            $invalidProperties[] = "'declined_reason' can't be null";
        }
        if ($this->container['canceled_by'] === null) {
            $invalidProperties[] = "'canceled_by' can't be null";
        }
        if ($this->container['canceled_at'] === null) {
            $invalidProperties[] = "'canceled_at' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['payment_collection_id'] === null) {
            $invalidProperties[] = "'payment_collection_id' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The order edit's ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string $order_id The ID of the order that is edited
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            throw new \InvalidArgumentException('non-nullable order_id cannot be null');
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets order
     *
     * @return \MedusaWP\MedusaClient\Store\Model\Order|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param \MedusaWP\MedusaClient\Store\Model\Order|null $order order
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            throw new \InvalidArgumentException('non-nullable order cannot be null');
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets changes
     *
     * @return \MedusaWP\MedusaClient\Store\Model\OrderItemChange[]|null
     */
    public function getChanges()
    {
        return $this->container['changes'];
    }

    /**
     * Sets changes
     *
     * @param \MedusaWP\MedusaClient\Store\Model\OrderItemChange[]|null $changes The details of all the changes on the original order's line items.
     *
     * @return self
     */
    public function setChanges($changes)
    {
        if (is_null($changes)) {
            throw new \InvalidArgumentException('non-nullable changes cannot be null');
        }
        $this->container['changes'] = $changes;

        return $this;
    }

    /**
     * Gets internal_note
     *
     * @return string
     */
    public function getInternalNote()
    {
        return $this->container['internal_note'];
    }

    /**
     * Sets internal_note
     *
     * @param string $internal_note An optional note with additional details about the order edit.
     *
     * @return self
     */
    public function setInternalNote($internal_note)
    {
        if (is_null($internal_note)) {
            array_push($this->openAPINullablesSetToNull, 'internal_note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('internal_note', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['internal_note'] = $internal_note;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string $created_by The unique identifier of the user or customer who created the order edit.
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets requested_by
     *
     * @return string
     */
    public function getRequestedBy()
    {
        return $this->container['requested_by'];
    }

    /**
     * Sets requested_by
     *
     * @param string $requested_by The unique identifier of the user or customer who requested the order edit.
     *
     * @return self
     */
    public function setRequestedBy($requested_by)
    {
        if (is_null($requested_by)) {
            array_push($this->openAPINullablesSetToNull, 'requested_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('requested_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['requested_by'] = $requested_by;

        return $this;
    }

    /**
     * Gets requested_at
     *
     * @return \DateTime
     */
    public function getRequestedAt()
    {
        return $this->container['requested_at'];
    }

    /**
     * Sets requested_at
     *
     * @param \DateTime $requested_at The date with timezone at which the edit was requested.
     *
     * @return self
     */
    public function setRequestedAt($requested_at)
    {
        if (is_null($requested_at)) {
            array_push($this->openAPINullablesSetToNull, 'requested_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('requested_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['requested_at'] = $requested_at;

        return $this;
    }

    /**
     * Gets confirmed_by
     *
     * @return string
     */
    public function getConfirmedBy()
    {
        return $this->container['confirmed_by'];
    }

    /**
     * Sets confirmed_by
     *
     * @param string $confirmed_by The unique identifier of the user or customer who confirmed the order edit.
     *
     * @return self
     */
    public function setConfirmedBy($confirmed_by)
    {
        if (is_null($confirmed_by)) {
            array_push($this->openAPINullablesSetToNull, 'confirmed_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('confirmed_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['confirmed_by'] = $confirmed_by;

        return $this;
    }

    /**
     * Gets confirmed_at
     *
     * @return \DateTime
     */
    public function getConfirmedAt()
    {
        return $this->container['confirmed_at'];
    }

    /**
     * Sets confirmed_at
     *
     * @param \DateTime $confirmed_at The date with timezone at which the edit was confirmed.
     *
     * @return self
     */
    public function setConfirmedAt($confirmed_at)
    {
        if (is_null($confirmed_at)) {
            array_push($this->openAPINullablesSetToNull, 'confirmed_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('confirmed_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['confirmed_at'] = $confirmed_at;

        return $this;
    }

    /**
     * Gets declined_by
     *
     * @return string
     */
    public function getDeclinedBy()
    {
        return $this->container['declined_by'];
    }

    /**
     * Sets declined_by
     *
     * @param string $declined_by The unique identifier of the user or customer who declined the order edit.
     *
     * @return self
     */
    public function setDeclinedBy($declined_by)
    {
        if (is_null($declined_by)) {
            array_push($this->openAPINullablesSetToNull, 'declined_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('declined_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['declined_by'] = $declined_by;

        return $this;
    }

    /**
     * Gets declined_at
     *
     * @return \DateTime
     */
    public function getDeclinedAt()
    {
        return $this->container['declined_at'];
    }

    /**
     * Sets declined_at
     *
     * @param \DateTime $declined_at The date with timezone at which the edit was declined.
     *
     * @return self
     */
    public function setDeclinedAt($declined_at)
    {
        if (is_null($declined_at)) {
            array_push($this->openAPINullablesSetToNull, 'declined_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('declined_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['declined_at'] = $declined_at;

        return $this;
    }

    /**
     * Gets declined_reason
     *
     * @return string
     */
    public function getDeclinedReason()
    {
        return $this->container['declined_reason'];
    }

    /**
     * Sets declined_reason
     *
     * @param string $declined_reason An optional note why  the order edit is declined.
     *
     * @return self
     */
    public function setDeclinedReason($declined_reason)
    {
        if (is_null($declined_reason)) {
            array_push($this->openAPINullablesSetToNull, 'declined_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('declined_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['declined_reason'] = $declined_reason;

        return $this;
    }

    /**
     * Gets canceled_by
     *
     * @return string
     */
    public function getCanceledBy()
    {
        return $this->container['canceled_by'];
    }

    /**
     * Sets canceled_by
     *
     * @param string $canceled_by The unique identifier of the user or customer who cancelled the order edit.
     *
     * @return self
     */
    public function setCanceledBy($canceled_by)
    {
        if (is_null($canceled_by)) {
            array_push($this->openAPINullablesSetToNull, 'canceled_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('canceled_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['canceled_by'] = $canceled_by;

        return $this;
    }

    /**
     * Gets canceled_at
     *
     * @return \DateTime
     */
    public function getCanceledAt()
    {
        return $this->container['canceled_at'];
    }

    /**
     * Sets canceled_at
     *
     * @param \DateTime $canceled_at The date with timezone at which the edit was cancelled.
     *
     * @return self
     */
    public function setCanceledAt($canceled_at)
    {
        if (is_null($canceled_at)) {
            array_push($this->openAPINullablesSetToNull, 'canceled_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('canceled_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['canceled_at'] = $canceled_at;

        return $this;
    }

    /**
     * Gets subtotal
     *
     * @return int|null
     */
    public function getSubtotal()
    {
        return $this->container['subtotal'];
    }

    /**
     * Sets subtotal
     *
     * @param int|null $subtotal The total of subtotal
     *
     * @return self
     */
    public function setSubtotal($subtotal)
    {
        if (is_null($subtotal)) {
            throw new \InvalidArgumentException('non-nullable subtotal cannot be null');
        }
        $this->container['subtotal'] = $subtotal;

        return $this;
    }

    /**
     * Gets discount_total
     *
     * @return int|null
     */
    public function getDiscountTotal()
    {
        return $this->container['discount_total'];
    }

    /**
     * Sets discount_total
     *
     * @param int|null $discount_total The total of discount
     *
     * @return self
     */
    public function setDiscountTotal($discount_total)
    {
        if (is_null($discount_total)) {
            throw new \InvalidArgumentException('non-nullable discount_total cannot be null');
        }
        $this->container['discount_total'] = $discount_total;

        return $this;
    }

    /**
     * Gets shipping_total
     *
     * @return int|null
     */
    public function getShippingTotal()
    {
        return $this->container['shipping_total'];
    }

    /**
     * Sets shipping_total
     *
     * @param int|null $shipping_total The total of the shipping amount
     *
     * @return self
     */
    public function setShippingTotal($shipping_total)
    {
        if (is_null($shipping_total)) {
            throw new \InvalidArgumentException('non-nullable shipping_total cannot be null');
        }
        $this->container['shipping_total'] = $shipping_total;

        return $this;
    }

    /**
     * Gets gift_card_total
     *
     * @return int|null
     */
    public function getGiftCardTotal()
    {
        return $this->container['gift_card_total'];
    }

    /**
     * Sets gift_card_total
     *
     * @param int|null $gift_card_total The total of the gift card amount
     *
     * @return self
     */
    public function setGiftCardTotal($gift_card_total)
    {
        if (is_null($gift_card_total)) {
            throw new \InvalidArgumentException('non-nullable gift_card_total cannot be null');
        }
        $this->container['gift_card_total'] = $gift_card_total;

        return $this;
    }

    /**
     * Gets gift_card_tax_total
     *
     * @return int|null
     */
    public function getGiftCardTaxTotal()
    {
        return $this->container['gift_card_tax_total'];
    }

    /**
     * Sets gift_card_tax_total
     *
     * @param int|null $gift_card_tax_total The total of the gift card tax amount
     *
     * @return self
     */
    public function setGiftCardTaxTotal($gift_card_tax_total)
    {
        if (is_null($gift_card_tax_total)) {
            throw new \InvalidArgumentException('non-nullable gift_card_tax_total cannot be null');
        }
        $this->container['gift_card_tax_total'] = $gift_card_tax_total;

        return $this;
    }

    /**
     * Gets tax_total
     *
     * @return int|null
     */
    public function getTaxTotal()
    {
        return $this->container['tax_total'];
    }

    /**
     * Sets tax_total
     *
     * @param int|null $tax_total The total of tax
     *
     * @return self
     */
    public function setTaxTotal($tax_total)
    {
        if (is_null($tax_total)) {
            throw new \InvalidArgumentException('non-nullable tax_total cannot be null');
        }
        $this->container['tax_total'] = $tax_total;

        return $this;
    }

    /**
     * Gets total
     *
     * @return int|null
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param int|null $total The total amount of the edited order.
     *
     * @return self
     */
    public function setTotal($total)
    {
        if (is_null($total)) {
            throw new \InvalidArgumentException('non-nullable total cannot be null');
        }
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets difference_due
     *
     * @return int|null
     */
    public function getDifferenceDue()
    {
        return $this->container['difference_due'];
    }

    /**
     * Sets difference_due
     *
     * @param int|null $difference_due The difference between the total amount of the order and total amount of edited order.
     *
     * @return self
     */
    public function setDifferenceDue($difference_due)
    {
        if (is_null($difference_due)) {
            throw new \InvalidArgumentException('non-nullable difference_due cannot be null');
        }
        $this->container['difference_due'] = $difference_due;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The status of the order edit.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \MedusaWP\MedusaClient\Store\Model\LineItem[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \MedusaWP\MedusaClient\Store\Model\LineItem[]|null $items The details of the cloned items from the original order with the new changes. Once the order edit is confirmed, these line items are associated with the original order.
     *
     * @return self
     */
    public function setItems($items)
    {
        if (is_null($items)) {
            throw new \InvalidArgumentException('non-nullable items cannot be null');
        }
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets payment_collection_id
     *
     * @return string
     */
    public function getPaymentCollectionId()
    {
        return $this->container['payment_collection_id'];
    }

    /**
     * Sets payment_collection_id
     *
     * @param string $payment_collection_id The ID of the payment collection
     *
     * @return self
     */
    public function setPaymentCollectionId($payment_collection_id)
    {
        if (is_null($payment_collection_id)) {
            array_push($this->openAPINullablesSetToNull, 'payment_collection_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_collection_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_collection_id'] = $payment_collection_id;

        return $this;
    }

    /**
     * Gets payment_collection
     *
     * @return \MedusaWP\MedusaClient\Store\Model\PaymentCollection|null
     */
    public function getPaymentCollection()
    {
        return $this->container['payment_collection'];
    }

    /**
     * Sets payment_collection
     *
     * @param \MedusaWP\MedusaClient\Store\Model\PaymentCollection|null $payment_collection payment_collection
     *
     * @return self
     */
    public function setPaymentCollection($payment_collection)
    {
        if (is_null($payment_collection)) {
            throw new \InvalidArgumentException('non-nullable payment_collection cannot be null');
        }
        $this->container['payment_collection'] = $payment_collection;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at The date with timezone at which the resource was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at The date with timezone at which the resource was updated.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


