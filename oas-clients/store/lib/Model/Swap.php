<?php
/**
 * Swap
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MedusaWP\MedusaClient\Store
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Medusa Storefront API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MedusaWP\MedusaClient\Store\Model;

use \ArrayAccess;
use \MedusaWP\MedusaClient\Store\ObjectSerializer;

/**
 * Swap Class Doc Comment
 *
 * @category Class
 * @description A swap can be created when a Customer wishes to exchange Products that they have purchased with different Products. It consists of a Return of previously purchased Products and a Fulfillment of new Products. It also includes information on any additional payment or refund required based on the difference between the exchanged products.
 * @package  MedusaWP\MedusaClient\Store
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Swap implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Swap';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'fulfillment_status' => 'string',
        'payment_status' => 'string',
        'order_id' => 'string',
        'order' => '\MedusaWP\MedusaClient\Store\Model\Order',
        'additional_items' => '\MedusaWP\MedusaClient\Store\Model\LineItem[]',
        'return_order' => '\MedusaWP\MedusaClient\Store\Model\ModelReturn',
        'fulfillments' => '\MedusaWP\MedusaClient\Store\Model\Fulfillment[]',
        'payment' => '\MedusaWP\MedusaClient\Store\Model\Payment',
        'difference_due' => 'int',
        'shipping_address_id' => 'string',
        'shipping_address' => '\MedusaWP\MedusaClient\Store\Model\Address',
        'shipping_methods' => '\MedusaWP\MedusaClient\Store\Model\ShippingMethod[]',
        'cart_id' => 'string',
        'cart' => '\MedusaWP\MedusaClient\Store\Model\Cart',
        'confirmed_at' => '\DateTime',
        'canceled_at' => '\DateTime',
        'no_notification' => 'bool',
        'allow_backorder' => 'bool',
        'idempotency_key' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'deleted_at' => '\DateTime',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'fulfillment_status' => null,
        'payment_status' => null,
        'order_id' => null,
        'order' => null,
        'additional_items' => null,
        'return_order' => null,
        'fulfillments' => null,
        'payment' => null,
        'difference_due' => null,
        'shipping_address_id' => null,
        'shipping_address' => null,
        'shipping_methods' => null,
        'cart_id' => null,
        'cart' => null,
        'confirmed_at' => 'date-time',
        'canceled_at' => 'date-time',
        'no_notification' => null,
        'allow_backorder' => null,
        'idempotency_key' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'deleted_at' => 'date-time',
        'metadata' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'fulfillment_status' => false,
		'payment_status' => false,
		'order_id' => false,
		'order' => false,
		'additional_items' => false,
		'return_order' => false,
		'fulfillments' => false,
		'payment' => false,
		'difference_due' => true,
		'shipping_address_id' => true,
		'shipping_address' => false,
		'shipping_methods' => false,
		'cart_id' => true,
		'cart' => false,
		'confirmed_at' => true,
		'canceled_at' => true,
		'no_notification' => true,
		'allow_backorder' => false,
		'idempotency_key' => true,
		'created_at' => false,
		'updated_at' => false,
		'deleted_at' => true,
		'metadata' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'fulfillment_status' => 'fulfillment_status',
        'payment_status' => 'payment_status',
        'order_id' => 'order_id',
        'order' => 'order',
        'additional_items' => 'additional_items',
        'return_order' => 'return_order',
        'fulfillments' => 'fulfillments',
        'payment' => 'payment',
        'difference_due' => 'difference_due',
        'shipping_address_id' => 'shipping_address_id',
        'shipping_address' => 'shipping_address',
        'shipping_methods' => 'shipping_methods',
        'cart_id' => 'cart_id',
        'cart' => 'cart',
        'confirmed_at' => 'confirmed_at',
        'canceled_at' => 'canceled_at',
        'no_notification' => 'no_notification',
        'allow_backorder' => 'allow_backorder',
        'idempotency_key' => 'idempotency_key',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'deleted_at' => 'deleted_at',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'fulfillment_status' => 'setFulfillmentStatus',
        'payment_status' => 'setPaymentStatus',
        'order_id' => 'setOrderId',
        'order' => 'setOrder',
        'additional_items' => 'setAdditionalItems',
        'return_order' => 'setReturnOrder',
        'fulfillments' => 'setFulfillments',
        'payment' => 'setPayment',
        'difference_due' => 'setDifferenceDue',
        'shipping_address_id' => 'setShippingAddressId',
        'shipping_address' => 'setShippingAddress',
        'shipping_methods' => 'setShippingMethods',
        'cart_id' => 'setCartId',
        'cart' => 'setCart',
        'confirmed_at' => 'setConfirmedAt',
        'canceled_at' => 'setCanceledAt',
        'no_notification' => 'setNoNotification',
        'allow_backorder' => 'setAllowBackorder',
        'idempotency_key' => 'setIdempotencyKey',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'deleted_at' => 'setDeletedAt',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'fulfillment_status' => 'getFulfillmentStatus',
        'payment_status' => 'getPaymentStatus',
        'order_id' => 'getOrderId',
        'order' => 'getOrder',
        'additional_items' => 'getAdditionalItems',
        'return_order' => 'getReturnOrder',
        'fulfillments' => 'getFulfillments',
        'payment' => 'getPayment',
        'difference_due' => 'getDifferenceDue',
        'shipping_address_id' => 'getShippingAddressId',
        'shipping_address' => 'getShippingAddress',
        'shipping_methods' => 'getShippingMethods',
        'cart_id' => 'getCartId',
        'cart' => 'getCart',
        'confirmed_at' => 'getConfirmedAt',
        'canceled_at' => 'getCanceledAt',
        'no_notification' => 'getNoNotification',
        'allow_backorder' => 'getAllowBackorder',
        'idempotency_key' => 'getIdempotencyKey',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'deleted_at' => 'getDeletedAt',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const FULFILLMENT_STATUS_NOT_FULFILLED = 'not_fulfilled';
    public const FULFILLMENT_STATUS_FULFILLED = 'fulfilled';
    public const FULFILLMENT_STATUS_SHIPPED = 'shipped';
    public const FULFILLMENT_STATUS_PARTIALLY_SHIPPED = 'partially_shipped';
    public const FULFILLMENT_STATUS_CANCELED = 'canceled';
    public const FULFILLMENT_STATUS_REQUIRES_ACTION = 'requires_action';
    public const PAYMENT_STATUS_NOT_PAID = 'not_paid';
    public const PAYMENT_STATUS_AWAITING = 'awaiting';
    public const PAYMENT_STATUS_CAPTURED = 'captured';
    public const PAYMENT_STATUS_CONFIRMED = 'confirmed';
    public const PAYMENT_STATUS_CANCELED = 'canceled';
    public const PAYMENT_STATUS_DIFFERENCE_REFUNDED = 'difference_refunded';
    public const PAYMENT_STATUS_PARTIALLY_REFUNDED = 'partially_refunded';
    public const PAYMENT_STATUS_REFUNDED = 'refunded';
    public const PAYMENT_STATUS_REQUIRES_ACTION = 'requires_action';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFulfillmentStatusAllowableValues()
    {
        return [
            self::FULFILLMENT_STATUS_NOT_FULFILLED,
            self::FULFILLMENT_STATUS_FULFILLED,
            self::FULFILLMENT_STATUS_SHIPPED,
            self::FULFILLMENT_STATUS_PARTIALLY_SHIPPED,
            self::FULFILLMENT_STATUS_CANCELED,
            self::FULFILLMENT_STATUS_REQUIRES_ACTION,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentStatusAllowableValues()
    {
        return [
            self::PAYMENT_STATUS_NOT_PAID,
            self::PAYMENT_STATUS_AWAITING,
            self::PAYMENT_STATUS_CAPTURED,
            self::PAYMENT_STATUS_CONFIRMED,
            self::PAYMENT_STATUS_CANCELED,
            self::PAYMENT_STATUS_DIFFERENCE_REFUNDED,
            self::PAYMENT_STATUS_PARTIALLY_REFUNDED,
            self::PAYMENT_STATUS_REFUNDED,
            self::PAYMENT_STATUS_REQUIRES_ACTION,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('fulfillment_status', $data ?? [], null);
        $this->setIfExists('payment_status', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('additional_items', $data ?? [], null);
        $this->setIfExists('return_order', $data ?? [], null);
        $this->setIfExists('fulfillments', $data ?? [], null);
        $this->setIfExists('payment', $data ?? [], null);
        $this->setIfExists('difference_due', $data ?? [], null);
        $this->setIfExists('shipping_address_id', $data ?? [], null);
        $this->setIfExists('shipping_address', $data ?? [], null);
        $this->setIfExists('shipping_methods', $data ?? [], null);
        $this->setIfExists('cart_id', $data ?? [], null);
        $this->setIfExists('cart', $data ?? [], null);
        $this->setIfExists('confirmed_at', $data ?? [], null);
        $this->setIfExists('canceled_at', $data ?? [], null);
        $this->setIfExists('no_notification', $data ?? [], null);
        $this->setIfExists('allow_backorder', $data ?? [], false);
        $this->setIfExists('idempotency_key', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('deleted_at', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['fulfillment_status'] === null) {
            $invalidProperties[] = "'fulfillment_status' can't be null";
        }
        $allowedValues = $this->getFulfillmentStatusAllowableValues();
        if (!is_null($this->container['fulfillment_status']) && !in_array($this->container['fulfillment_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fulfillment_status', must be one of '%s'",
                $this->container['fulfillment_status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['payment_status'] === null) {
            $invalidProperties[] = "'payment_status' can't be null";
        }
        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!is_null($this->container['payment_status']) && !in_array($this->container['payment_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_status', must be one of '%s'",
                $this->container['payment_status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['order_id'] === null) {
            $invalidProperties[] = "'order_id' can't be null";
        }
        if ($this->container['difference_due'] === null) {
            $invalidProperties[] = "'difference_due' can't be null";
        }
        if ($this->container['shipping_address_id'] === null) {
            $invalidProperties[] = "'shipping_address_id' can't be null";
        }
        if ($this->container['cart_id'] === null) {
            $invalidProperties[] = "'cart_id' can't be null";
        }
        if ($this->container['confirmed_at'] === null) {
            $invalidProperties[] = "'confirmed_at' can't be null";
        }
        if ($this->container['canceled_at'] === null) {
            $invalidProperties[] = "'canceled_at' can't be null";
        }
        if ($this->container['no_notification'] === null) {
            $invalidProperties[] = "'no_notification' can't be null";
        }
        if ($this->container['allow_backorder'] === null) {
            $invalidProperties[] = "'allow_backorder' can't be null";
        }
        if ($this->container['idempotency_key'] === null) {
            $invalidProperties[] = "'idempotency_key' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['deleted_at'] === null) {
            $invalidProperties[] = "'deleted_at' can't be null";
        }
        if ($this->container['metadata'] === null) {
            $invalidProperties[] = "'metadata' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The swap's ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets fulfillment_status
     *
     * @return string
     */
    public function getFulfillmentStatus()
    {
        return $this->container['fulfillment_status'];
    }

    /**
     * Sets fulfillment_status
     *
     * @param string $fulfillment_status The status of the Fulfillment of the Swap.
     *
     * @return self
     */
    public function setFulfillmentStatus($fulfillment_status)
    {
        if (is_null($fulfillment_status)) {
            throw new \InvalidArgumentException('non-nullable fulfillment_status cannot be null');
        }
        $allowedValues = $this->getFulfillmentStatusAllowableValues();
        if (!in_array($fulfillment_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fulfillment_status', must be one of '%s'",
                    $fulfillment_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fulfillment_status'] = $fulfillment_status;

        return $this;
    }

    /**
     * Gets payment_status
     *
     * @return string
     */
    public function getPaymentStatus()
    {
        return $this->container['payment_status'];
    }

    /**
     * Sets payment_status
     *
     * @param string $payment_status The status of the Payment of the Swap. The payment may either refer to the refund of an amount or the authorization of a new amount.
     *
     * @return self
     */
    public function setPaymentStatus($payment_status)
    {
        if (is_null($payment_status)) {
            throw new \InvalidArgumentException('non-nullable payment_status cannot be null');
        }
        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!in_array($payment_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_status', must be one of '%s'",
                    $payment_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_status'] = $payment_status;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string $order_id The ID of the order that the swap belongs to.
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            throw new \InvalidArgumentException('non-nullable order_id cannot be null');
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets order
     *
     * @return \MedusaWP\MedusaClient\Store\Model\Order|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param \MedusaWP\MedusaClient\Store\Model\Order|null $order order
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            throw new \InvalidArgumentException('non-nullable order cannot be null');
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets additional_items
     *
     * @return \MedusaWP\MedusaClient\Store\Model\LineItem[]|null
     */
    public function getAdditionalItems()
    {
        return $this->container['additional_items'];
    }

    /**
     * Sets additional_items
     *
     * @param \MedusaWP\MedusaClient\Store\Model\LineItem[]|null $additional_items The details of the new products to send to the customer, represented as line items.
     *
     * @return self
     */
    public function setAdditionalItems($additional_items)
    {
        if (is_null($additional_items)) {
            throw new \InvalidArgumentException('non-nullable additional_items cannot be null');
        }
        $this->container['additional_items'] = $additional_items;

        return $this;
    }

    /**
     * Gets return_order
     *
     * @return \MedusaWP\MedusaClient\Store\Model\ModelReturn|null
     */
    public function getReturnOrder()
    {
        return $this->container['return_order'];
    }

    /**
     * Sets return_order
     *
     * @param \MedusaWP\MedusaClient\Store\Model\ModelReturn|null $return_order return_order
     *
     * @return self
     */
    public function setReturnOrder($return_order)
    {
        if (is_null($return_order)) {
            throw new \InvalidArgumentException('non-nullable return_order cannot be null');
        }
        $this->container['return_order'] = $return_order;

        return $this;
    }

    /**
     * Gets fulfillments
     *
     * @return \MedusaWP\MedusaClient\Store\Model\Fulfillment[]|null
     */
    public function getFulfillments()
    {
        return $this->container['fulfillments'];
    }

    /**
     * Sets fulfillments
     *
     * @param \MedusaWP\MedusaClient\Store\Model\Fulfillment[]|null $fulfillments The details of the fulfillments that are used to send the new items to the customer.
     *
     * @return self
     */
    public function setFulfillments($fulfillments)
    {
        if (is_null($fulfillments)) {
            throw new \InvalidArgumentException('non-nullable fulfillments cannot be null');
        }
        $this->container['fulfillments'] = $fulfillments;

        return $this;
    }

    /**
     * Gets payment
     *
     * @return \MedusaWP\MedusaClient\Store\Model\Payment|null
     */
    public function getPayment()
    {
        return $this->container['payment'];
    }

    /**
     * Sets payment
     *
     * @param \MedusaWP\MedusaClient\Store\Model\Payment|null $payment payment
     *
     * @return self
     */
    public function setPayment($payment)
    {
        if (is_null($payment)) {
            throw new \InvalidArgumentException('non-nullable payment cannot be null');
        }
        $this->container['payment'] = $payment;

        return $this;
    }

    /**
     * Gets difference_due
     *
     * @return int
     */
    public function getDifferenceDue()
    {
        return $this->container['difference_due'];
    }

    /**
     * Sets difference_due
     *
     * @param int $difference_due The difference amount between the order’s original total and the new total imposed by the swap. If its value is negative, a refund must be issues to the customer. If it's positive, additional payment must be authorized by the customer. Otherwise, no payment processing is required.
     *
     * @return self
     */
    public function setDifferenceDue($difference_due)
    {
        if (is_null($difference_due)) {
            array_push($this->openAPINullablesSetToNull, 'difference_due');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('difference_due', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['difference_due'] = $difference_due;

        return $this;
    }

    /**
     * Gets shipping_address_id
     *
     * @return string
     */
    public function getShippingAddressId()
    {
        return $this->container['shipping_address_id'];
    }

    /**
     * Sets shipping_address_id
     *
     * @param string $shipping_address_id The Address to send the new Line Items to - in most cases this will be the same as the shipping address on the Order.
     *
     * @return self
     */
    public function setShippingAddressId($shipping_address_id)
    {
        if (is_null($shipping_address_id)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_address_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_address_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shipping_address_id'] = $shipping_address_id;

        return $this;
    }

    /**
     * Gets shipping_address
     *
     * @return \MedusaWP\MedusaClient\Store\Model\Address|null
     */
    public function getShippingAddress()
    {
        return $this->container['shipping_address'];
    }

    /**
     * Sets shipping_address
     *
     * @param \MedusaWP\MedusaClient\Store\Model\Address|null $shipping_address shipping_address
     *
     * @return self
     */
    public function setShippingAddress($shipping_address)
    {
        if (is_null($shipping_address)) {
            throw new \InvalidArgumentException('non-nullable shipping_address cannot be null');
        }
        $this->container['shipping_address'] = $shipping_address;

        return $this;
    }

    /**
     * Gets shipping_methods
     *
     * @return \MedusaWP\MedusaClient\Store\Model\ShippingMethod[]|null
     */
    public function getShippingMethods()
    {
        return $this->container['shipping_methods'];
    }

    /**
     * Sets shipping_methods
     *
     * @param \MedusaWP\MedusaClient\Store\Model\ShippingMethod[]|null $shipping_methods The details of the shipping methods used to fulfill the additional items purchased.
     *
     * @return self
     */
    public function setShippingMethods($shipping_methods)
    {
        if (is_null($shipping_methods)) {
            throw new \InvalidArgumentException('non-nullable shipping_methods cannot be null');
        }
        $this->container['shipping_methods'] = $shipping_methods;

        return $this;
    }

    /**
     * Gets cart_id
     *
     * @return string
     */
    public function getCartId()
    {
        return $this->container['cart_id'];
    }

    /**
     * Sets cart_id
     *
     * @param string $cart_id The ID of the cart that the customer uses to complete the swap.
     *
     * @return self
     */
    public function setCartId($cart_id)
    {
        if (is_null($cart_id)) {
            array_push($this->openAPINullablesSetToNull, 'cart_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cart_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cart_id'] = $cart_id;

        return $this;
    }

    /**
     * Gets cart
     *
     * @return \MedusaWP\MedusaClient\Store\Model\Cart|null
     */
    public function getCart()
    {
        return $this->container['cart'];
    }

    /**
     * Sets cart
     *
     * @param \MedusaWP\MedusaClient\Store\Model\Cart|null $cart cart
     *
     * @return self
     */
    public function setCart($cart)
    {
        if (is_null($cart)) {
            throw new \InvalidArgumentException('non-nullable cart cannot be null');
        }
        $this->container['cart'] = $cart;

        return $this;
    }

    /**
     * Gets confirmed_at
     *
     * @return \DateTime
     */
    public function getConfirmedAt()
    {
        return $this->container['confirmed_at'];
    }

    /**
     * Sets confirmed_at
     *
     * @param \DateTime $confirmed_at The date with timezone at which the Swap was confirmed by the Customer.
     *
     * @return self
     */
    public function setConfirmedAt($confirmed_at)
    {
        if (is_null($confirmed_at)) {
            array_push($this->openAPINullablesSetToNull, 'confirmed_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('confirmed_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['confirmed_at'] = $confirmed_at;

        return $this;
    }

    /**
     * Gets canceled_at
     *
     * @return \DateTime
     */
    public function getCanceledAt()
    {
        return $this->container['canceled_at'];
    }

    /**
     * Sets canceled_at
     *
     * @param \DateTime $canceled_at The date with timezone at which the Swap was canceled.
     *
     * @return self
     */
    public function setCanceledAt($canceled_at)
    {
        if (is_null($canceled_at)) {
            array_push($this->openAPINullablesSetToNull, 'canceled_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('canceled_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['canceled_at'] = $canceled_at;

        return $this;
    }

    /**
     * Gets no_notification
     *
     * @return bool
     */
    public function getNoNotification()
    {
        return $this->container['no_notification'];
    }

    /**
     * Sets no_notification
     *
     * @param bool $no_notification If set to true, no notification will be sent related to this swap
     *
     * @return self
     */
    public function setNoNotification($no_notification)
    {
        if (is_null($no_notification)) {
            array_push($this->openAPINullablesSetToNull, 'no_notification');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('no_notification', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['no_notification'] = $no_notification;

        return $this;
    }

    /**
     * Gets allow_backorder
     *
     * @return bool
     */
    public function getAllowBackorder()
    {
        return $this->container['allow_backorder'];
    }

    /**
     * Sets allow_backorder
     *
     * @param bool $allow_backorder If true, swaps can be completed with items out of stock
     *
     * @return self
     */
    public function setAllowBackorder($allow_backorder)
    {
        if (is_null($allow_backorder)) {
            throw new \InvalidArgumentException('non-nullable allow_backorder cannot be null');
        }
        $this->container['allow_backorder'] = $allow_backorder;

        return $this;
    }

    /**
     * Gets idempotency_key
     *
     * @return string
     */
    public function getIdempotencyKey()
    {
        return $this->container['idempotency_key'];
    }

    /**
     * Sets idempotency_key
     *
     * @param string $idempotency_key Randomly generated key used to continue the completion of the swap in case of failure.
     *
     * @return self
     */
    public function setIdempotencyKey($idempotency_key)
    {
        if (is_null($idempotency_key)) {
            array_push($this->openAPINullablesSetToNull, 'idempotency_key');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('idempotency_key', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['idempotency_key'] = $idempotency_key;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at The date with timezone at which the resource was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at The date with timezone at which the resource was updated.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets deleted_at
     *
     * @return \DateTime
     */
    public function getDeletedAt()
    {
        return $this->container['deleted_at'];
    }

    /**
     * Sets deleted_at
     *
     * @param \DateTime $deleted_at The date with timezone at which the resource was deleted.
     *
     * @return self
     */
    public function setDeletedAt($deleted_at)
    {
        if (is_null($deleted_at)) {
            array_push($this->openAPINullablesSetToNull, 'deleted_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deleted_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deleted_at'] = $deleted_at;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object $metadata An optional key-value map with additional details
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            array_push($this->openAPINullablesSetToNull, 'metadata');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metadata', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


